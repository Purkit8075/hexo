<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Tebi + PicGo 搭建图床</title>
      <link href="/2023/04/06/create-picture-bed-on-tebi/"/>
      <url>/2023/04/06/create-picture-bed-on-tebi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Tebi-搭建图床"><a href="#使用-Tebi-搭建图床" class="headerlink" title="使用 Tebi 搭建图床"></a>使用 <code>Tebi</code> 搭建图床</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果您还在用第三方图床或者没有图床可用，那您不妨参考这篇文章自行搭建一个免费的个人的图床。</p><p>图床正如大多数东西一样，只有掌握在自己手上才是最安心的。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>一个邮箱</p></li><li><p><code>Tebi</code> 账号</p></li></ul><h2 id="配置-Tebi"><a href="#配置-Tebi" class="headerlink" title="配置 Tebi"></a>配置 <code>Tebi</code></h2><p>首先，访问 <a href="https://tebi.io/">Tebi</a> 并使用邮箱注册账号，在收件箱或者垃圾邮件里点击 <code>Tebi</code> 发的链接，完成注册。</p><p>接着访问 <a href="https://client.tebi.io/buckets/">Client.tebi.io</a> ，在右上角的 <code>Enter bucket name</code> 中输入您想要的图床域名，例如我的是 <code>img.purkit.ml</code> ，然后点击 <code>ADD BUCKET</code> 。</p><img title="" src="https://img.purkit.ml/ADD%20BUCKET" alt="" data-align="center" width="596"><p>接着添加 <code>DNS</code> 域名解析。给您的域名添加一个 <code>CNAME</code> ，<code>Target</code> 填 <code>您的域名 + .s3.tebi.io</code> 。例如 <code>img.purkit.ml</code> 就填 <code>img.purkit.ml.s3.tebi.io</code> 。</p><p>然后回到 <code>Tebi</code> 。点击左边的 <code>Keys</code> 。接着 <code>ADD KEY</code> （输入框中 <code>Optional key comment</code> 填不填都可以）。</p><p>在 <code>EDIT</code> 中将 <code>S3 Protocol</code> 打勾。</p><img src="https://img.purkit.ml/add-key" title="" alt="" data-align="center"><p>回到 <code>Bucket</code> ， 点击刚刚创建的 <code>Bucket</code> 旁边的 <code>Edit</code> 。</p><img title="" src="https://img.purkit.ml/click-edit" alt="" data-align="center" width="593"><p>选择 <code>Access Control</code> ，将全部选项都设置成 <code>Public</code> 。</p><img title="" src="file:///home/purkit/.config/marktext/images/2023-04-07-11-39-41-image.png" alt="" data-align="center" width="540"><p>在 <code>DNS</code> 解析生效之后，点击 <code>Hosting</code> ，将 3 个选项全部勾选。</p><img title="" src="https://img.purkit.ml/set-hosting" alt="" data-align="center" width="552"><p>其它选项保持默认，点击 <code>UPDATE</code> 。</p><p>访问您的图床域名，如果出现 <code>404</code> 页面则说明配置成功了。</p><h2 id="使用-PicGo"><a href="#使用-PicGo" class="headerlink" title="使用 PicGo"></a>使用 <code>PicGo</code></h2><p>配置完图床之后，要如何使用呢？</p><p>本来我想得是挂载到 <code>Alist</code> 网盘上的，后来发现 <code>PicGo</code> 有 <code>S3</code> 传输的插件。</p><p>于是我选择使用 <code>PicGo</code> 。</p><h3 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 <code>PicGo</code></h3><p>首先，访问 <code>PicGo</code> 的仓库：<a href="https://github.com/Molunerfinn/PicGo">GitHub</a> 。</p><p>在 <code>Release</code> 中下载与自己系统对应的版本。</p><p>安装并运行 <code>PicGo</code> 后，转到 <code>插件设置</code> ，搜索 <code>S3</code> ，下载第一个插件。</p><img title="" src="https://img.purkit.ml/download-s3" alt="" data-align="center" width="553"><p>转到 <code>图床设置 -&gt; Amazon S3</code> ，新建一个图床。</p><p>配置如图：</p><img title="" src="https://img.purkit.ml/config-picgo-s3" alt="" data-align="center" width="492"><p>图床配置名随意，<code>应用密钥 ID</code> 和 <code>应用密钥</code> 是在 <code>Tebi</code> 中添加的 <code>Key</code> 和 <code>Secret</code> 。</p><p><code>桶</code> 的名称填 <code>Bucket</code> 的名称。文件路径参考下表：</p><table><thead><tr><th align="center">payload</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>&#123;year&#125;</code></td><td align="center">当前日期 - 年</td></tr><tr><td align="center"><code>&#123;month&#125;</code></td><td align="center">当前日期 - 月</td></tr><tr><td align="center"><code>&#123;day&#125;</code></td><td align="center">当前日期 - 日</td></tr><tr><td align="center"><code>&#123;fullName&#125;</code></td><td align="center">完整文件名（含扩展名）</td></tr><tr><td align="center"><code>&#123;fileName&#125;</code></td><td align="center">文件名（不含扩展名）</td></tr><tr><td align="center"><code>&#123;extName&#125;</code></td><td align="center">扩展名（不含<code>.</code>）</td></tr><tr><td align="center"><code>&#123;md5&#125;</code></td><td align="center">图片 MD5 计算值</td></tr><tr><td align="center"><code>&#123;sha1&#125;</code></td><td align="center">图片 SHA1 计算值</td></tr><tr><td align="center"><code>&#123;sha256&#125;</code></td><td align="center">图片 SHA256 计算值</td></tr></tbody></table><blockquote><p>来源：<a href="https://github.com/wayjam/picgo-plugin-s3">GitHub PicGo S3 插件</a> 。</p></blockquote><p><code>地区</code> 和 <code>自定义节点</code> 都填写 <code>s3.tebi.io</code> 即可。<code>自定义域名</code> 填写您的图床域名，注意 <code>https://</code> 。</p><p>最后将下方的 3 个选项全部勾选。点击 <code>确定</code> 进行保存。</p><img title="" src="https://img.purkit.ml/confing-s3" alt="" data-align="center" width="512"><p>在 <code>上传区</code> 将上传的图床设置成 <code>Amazon S3</code> 。至此，您就可以使用 <code>PicGo</code> 和 <code>Tebi</code> 作为图床了。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tebi </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Waline 作为 Butterfly 主题的评论系统</title>
      <link href="/2022/12/31/add-waline-to-butterfly/"/>
      <url>/2022/12/31/add-waline-to-butterfly/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Waline-作为-Butterfly-主题的评论系统"><a href="#使用-Waline-作为-Butterfly-主题的评论系统" class="headerlink" title="使用 Waline 作为 Butterfly 主题的评论系统"></a>使用 Waline 作为 Butterfly 主题的评论系统</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前，我的博客使用 <code>Valine</code> 作为评论系统，后来发现 <code>Valine</code> 具有重大的安全问题，于是决定更换 <code>Waline</code> 作为博客的评论系统。</p><blockquote><p><a href="https://ttys3.dev/post/please-stop-using-valine-js-comment-system-until-it-fixed-the-privacy-leaking-problem/">Valine 的安全问题</a> 详见该文章。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始之前，您需要：</p><ul><li><p><code>GitHub</code> 账号</p></li><li><p><code>Vercel</code> 账号</p></li><li><p><code>bit.io</code> 账号</p></li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>登录 <a href="https://bit.io/">bit.io</a> 。点击 New 。</p><img src="https://ci.cncn3.cn/70e93ea80a7317bca6d55a477290ae9a.png" title="" alt="70e93ea80a7317bca6d55a477290ae9a.png" data-align="center"><p>填写数据库名称之后打开 <a href="https://github.com/walinejs/waline/blob/main/assets/waline.pgsql">waline.pgsql</a>  ，复制文件内容，粘贴到 <code>bit.io</code> 的 <code>Query Editor</code> 中，点击 <code>Run Query</code> 。</p><img src="https://ci.cncn3.cn/b8f3ed3f52ab78596201ca9740dbb38d.png" title="" alt="b8f3ed3f52ab78596201ca9740dbb38d.png" data-align="center"><p>至此，数据库的创建就完成了。先将这个页面放到后台，后面还会用到。</p><h2 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 <code>Vercel</code></h2><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example"><img src="https://vercel.com/button"></a></p><p>点击上方按钮，进入 <code>Vercel</code> 的部署界面，选择仓库之后，点击 <code>Create</code> 。</p><p>部署成功之后，在项目界面，点击 <code>Settings -&gt; Environment Variables</code> 。</p><p>添加以下环境变量。</p><table><thead><tr><th>环境变量名称</th><th>必填</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>PG_DB</code></td><td>✅</td><td></td><td>PostgreSQL 数据库库名</td></tr><tr><td><code>PG_USER</code></td><td>✅</td><td></td><td>PostgreSQL 数据库的用户名</td></tr><tr><td><code>PG_PASSWORD</code></td><td>✅</td><td></td><td>PostgreSQL 数据库的密码</td></tr><tr><td><code>PG_HOST</code></td><td></td><td>127.0.0.1</td><td>PostgreSQL 服务的地址</td></tr><tr><td><code>PG_PORT</code></td><td></td><td>3211</td><td>PostgreSQL 服务的端口</td></tr><tr><td><code>PG_PREFIX</code></td><td></td><td><code>wl_</code></td><td>PostgreSQL 数据表的表前缀</td></tr><tr><td><code>PG_SSL</code></td><td></td><td><code>false</code></td><td>是否使用 SSL 连接 PostgreSQL 数据库</td></tr></tbody></table><blockquote><p>来源：<a href="https://waline.js.org/guide/database.html#postgresql">Waline 官方文档</a> 。</p></blockquote><p>其中，<code>PG_PREFIX</code> 不需要填写，<code>PG_SSL</code> 填写 <code>true</code> 。</p><p>其它的选项您可以在 <code>bit.io</code> 项目中的 <code>Connect</code> 中找到。</p><img src="https://ci.cncn3.cn/2a7cbc46491fd3e8dec0082dcaeb010c.png" title="" alt="2a7cbc46491fd3e8dec0082dcaeb010c.png" data-align="center"><p>在 <code>Vercel</code> 界面中重新部署。然后访问 <code>Vercel</code> 的域名。在页面中测试一下能否发送评论。</p><p>因为 <code>Vercel</code> 的域名在国内无法访问，所以我们需要给 <code>Vercel</code> 绑定一下域名，如何给 <code>Vercel</code> 绑定域名比较简单，这里就不做介绍。</p><h2 id="添加到-Butterfly-主题中"><a href="#添加到-Butterfly-主题中" class="headerlink" title="添加到 Butterfly 主题中"></a>添加到 <code>Butterfly</code> 主题中</h2><p>打开 <code>_config.butterfly.yml</code> 文件，找到 <code>Waline</code> 选项。</p><p><code>serverURL</code> 填写您的 <code>Waline</code> 域名。</p><p>至此，<code>Waline</code> 评论系统就添加成功了。</p><blockquote><p>参考：<a href="https://waline.js.org/">Waline 官方文档</a></p></blockquote><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Waline </tag>
            
            <tag> Vercel </tag>
            
            <tag> bit.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pantheon + Render 搭建免费 WordPress 博客</title>
      <link href="/2022/12/25/create-free-wordpress/"/>
      <url>/2022/12/25/create-free-wordpress/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始零成本搭建-WordPress-博客"><a href="#从零开始零成本搭建-WordPress-博客" class="headerlink" title="从零开始零成本搭建 WordPress 博客"></a>从零开始零成本搭建 WordPress 博客</h1><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><ul><li>一个谷歌账号</li><li>一个 GitHub 账号</li><li>一个 Pantheon 账号</li><li>一个 Freenom 账号</li><li>一个 Render 账号</li><li>一个 Cloudflare 账号</li></ul><h2 id="注册免费域名"><a href="#注册免费域名" class="headerlink" title="注册免费域名"></a>注册免费域名</h2><p>因为是零成本搭建网站，所以我们选择免费的域名。</p><p>免费域名有 <code>.ml</code> 、<code>.tk</code> 、<code>.cf</code> 和 <code>.gq</code> 。</p><p>打开 <a href="https://www.freenom.com/">Freenom</a> 。使用 <code>Google</code> 账号登录。</p><p>依次点击 <code>Services -&gt; Register a New Domain</code> 。</p><img src="https://ci.cncn3.cn/bc088e10b8c123ed8aa3cc68f9206f40.png" title="" alt="bc088e10b8c123ed8aa3cc68f9206f40.png" data-align="center"><p>在搜索框中输入您想要的域名，记得加上后缀。</p><p>例如，我这里选择 <code>my-new-test.ml</code> ，然后点击 <code>Check Availability</code> 。</p><img src="https://ci.cncn3.cn/298297493ad30bde8c7cc95bf6472b15.png" title="" alt="298297493ad30bde8c7cc95bf6472b15.png" data-align="center"><p>如果域名可用，那它将自动加入购物车。</p><p>接着我们点击 <code>Checkout</code> ，进入结算界面。</p><img src="file:///home/purkit/.config/marktext/images/2022-12-25-14-44-04-image.png" title="" alt="" data-align="center"><p>下拉 <code>Period</code> ，可以看到，一年之内域名是免费的。</p><img src="https://ci.cncn3.cn/26d6ee7700102f8aa7ff830a37ba8149.png" title="" alt="26d6ee7700102f8aa7ff830a37ba8149.png" data-align="center"><p>我们选择 12Months ，即一年，到期时需要进行再次购买，如果再次购买一年之内的，它仍然免费。</p><p>接下来的步骤就比较麻烦了。</p><p>首先，打开 <a href="https://ip.sb/">IP 查询</a> 查看您的 IP 所对应的地区。</p><p>接着打开 <a href="https://www.shenfendaquan.com/">身份生成</a> ，选择您 IP 所在的地区并生成信息。</p><p>然后将身份填入 <code>Freenom</code> 中。这样您就能够购买到自己的域名了。</p><h2 id="域名托管"><a href="#域名托管" class="headerlink" title="域名托管"></a>域名托管</h2><p>购买完域名之后，我们打开并注册 <a href="https://www.cloudflare.com/">Cloudflare</a> 。</p><p>我们使用 <code>Cloudflare</code> 来托管我们的域名。</p><p>登录之后，点击右上角的 <code>Add site</code> 。输入域名之后选择免费计划。</p><p>在添加 <code>DNS</code> 解析界面我们直接点击 <code>Continue</code> 。</p><img src="https://ci.cncn3.cn/f043285746025924ddbb0cbdc75a01de.png" title="" alt="f043285746025924ddbb0cbdc75a01de.png" data-align="center"><p>在 <code>Change your nameservers</code> 界面停留。</p><img src="file:///home/purkit/.config/marktext/images/2022-12-25-15-01-08-image.png" title="" alt="" data-align="center"><p>返回 <code>Freenom</code> ，点击 <code>Manage Domain</code> 。</p><img src="https://ci.cncn3.cn/6cf936a4617db99b7968adc4b59c144f.png" title="" alt="6cf936a4617db99b7968adc4b59c144f.png" data-align="center"><p>再依次点击 <code>Management Tools -&gt; Nameservers</code> 。</p><img src="https://ci.cncn3.cn/3eac7427d26d6175c8718df8b18c819d.png" title="" alt="3eac7427d26d6175c8718df8b18c819d.png" data-align="center"><p>将 <code>Cloudflare</code> 的 <code>Nameserver</code> 添加到 <code>Freenom</code> 中。</p><img src="https://ci.cncn3.cn/250ce06db9e3845c4a5e877f010ebcad.png" title="" alt="250ce06db9e3845c4a5e877f010ebcad.png" data-align="center"><p>结果如下图：</p><img src="https://ci.cncn3.cn/5499dc599f60a8c5d3219a975b26c777.png" title="" alt="5499dc599f60a8c5d3219a975b26c777.png" data-align="center"><p>在 <code>Cloudflare</code> 中选择确定，然后将所有的选项都打勾，最后完成。</p><h2 id="白嫖-WordPress"><a href="#白嫖-WordPress" class="headerlink" title="白嫖 WordPress"></a>白嫖 <code>WordPress</code></h2><p>打开网站 <a href="https://pantheon.io/">Pantheon</a> 。</p><p>注册并登录。点击 <code>Create New Site</code> 。</p><img src="https://ci.cncn3.cn/855a88b4c242fcb95c5a6f5a06a5f07a.png" title="" alt="855a88b4c242fcb95c5a6f5a06a5f07a.png" data-align="center"><p>选择 <code>WordPress</code> 。然后输入网站的名称。</p><p>等待部署完成之后，<code>Pantheon</code> 会给我们分配一个三级域名。我们需要绑定自己的域名。</p><p>但是，<code>Pantheon</code> 的绑定域名服务是收费的。所以我们需要别的方法。</p><h2 id="使用-Render-反代-Pantheon-域名"><a href="#使用-Render-反代-Pantheon-域名" class="headerlink" title="使用 Render 反代 Pantheon 域名"></a>使用 <code>Render</code> 反代 <code>Pantheon</code> 域名</h2><p>我们注册 <code>GitHub</code> 账号。</p><p>然后 <code>import</code> 这个 <a href="https://github.com/gitiy1/blog">项目</a> 。建议将仓库设置为私有。</p><p>打开 <code>nginx.conf</code> 文件，将下图中圈出的区域中的链接替换为您自己的链接。</p><p>您也可以选择反代到您的二级域名之下。只需要修改 <code>my-new-test.ml</code> 为 <code>xxx.my-new-test.ml</code> 即可。</p><img src="https://ci.cncn3.cn/2a450b80865f85bf0bf9fb49baa6a9f1.png" title="" alt="2a450b80865f85bf0bf9fb49baa6a9f1.png" data-align="center"><blockquote><p>以上部分参考 <a href="https://dev-yangtzeus.pantheonsite.io/2022/04/12/railway-nginx/">YANGTZEUSの</a> 。</p></blockquote><p>打开 <a href="https://render.com/">Render</a> ，使用 <code>GitHub</code> 注册并登录。</p><p>选择 <code>Web Services</code> 。</p><img src="https://ci.cncn3.cn/cbd7bea710bcfb340c0355c072423c0d.png" title="" alt="cbd7bea710bcfb340c0355c072423c0d.png" data-align="center"><p>连接您自己刚刚 import 的仓库。</p><p>填写名称后，添加环境变量 <code>PORT</code> 值为 <code>80</code> 。</p><p>部署完成之后，点击 <code>Settings</code> 找到 <code>Custom Domains</code> ，进行域名绑定。</p><p>至此，您就拥有了一个自己的博客了！</p><p><strong>Now,enjoy writing!</strong></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>每三个月都要到 <code>Pantheon</code>  中进行一次 <code>commit</code> ，否则您的博客会被暂时停止，数据不会丢失。</li><li><code>Render</code> 的免费账户一个月的服务时间一共只有 750 小时，这就意为着，您只能在免费账号中添加一个项目。如果时间用完，那么您的项目将会被停止。</li></ul><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（八）</title>
      <link href="/2022/12/24/cpp-8/"/>
      <url>/2022/12/24/cpp-8/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（八）"><a href="#C-教程（八）" class="headerlink" title="C++ 教程（八）"></a>C++ 教程（八）</h1><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>前面我们介绍了一维的数组，即形如 <code>int a[10];</code> 的数组。有的时候我们要用数组来模拟二维座标系，如果这个时候只用一维数组就显得不够直观。</p><p>因此，我们有必要学习多维数组。</p><p>我们以二维数组为例。</p><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p>二维数组的声明可以类比一维数组，比如我们要声明一个大小为 <code>10 * 10</code> 的数组 <code>Arr</code> ，其声明形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Arr[ArSize][ArSize] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>对于二维数组的初始化，我们同样可以使用 <code>= &#123;0&#125;</code> 的这种方式。</p><p>如果要初始化成不同的数据，也可以类比一维数组的操作。如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Arr[ArSize][ArSize] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里只初始化了前两行的前几列，通过这个初始化的方式，可以看出，二维数组实际上是由多个一维数组组成的，对于多维数组，也可以看成由低维数组组成。</p><p>如果要将多维数组清零，同样可以使用 <code>memset()</code> 函数进行。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">memset</span>(Arr, <span class="number">0</span>, <span class="built_in">sizeof</span>(Arr));</span><br></pre></td></tr></table></figure><h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h3><p>对于一维数组，我们使用一层循环进行遍历，那么对于二维数组，我们就需要嵌套一个循环，使用两层循环进行遍历。</p><p>示例程序 8.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Arr[ArSize][ArSize] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ArSize; j++)</span><br><span class="line">            std::cout &lt;&lt; Arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><img title="8.1" src="https://ci.cncn3.cn/3d6b47da0b3f826eabd8d5711a5481e2.png" alt="3d6b47da0b3f826eabd8d5711a5481e2.png" data-align="center"><p>可以看到，未初始化的元素默认未 0 。</p><h2 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h2><p>前面我们介绍了指针与变量和结构体的用法，那么指针与数组的用法有什么不同之处呢？</p><h3 id="数组指针的声明"><a href="#数组指针的声明" class="headerlink" title="数组指针的声明"></a>数组指针的声明</h3><p>我们以声明一个数组 <code>a[4]</code> 和一个指向该数组的指针 <code>*ptr</code> 为例。其声明方式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span>  a[ArSize] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>* ptr = a;</span><br></pre></td></tr></table></figure><p>细心的读者也许已经发现，这里指针的赋值与前面提到的不一样。</p><p>如果是一个 <code>int</code> 类型的变量 <code>x</code> ，那么指针的声明是 <code>int* ptr = &amp;x</code> ，那为什么数组没有使用 <code>&amp;</code> 符号呢？</p><p>实际上，数组的名称即本例中的 <code>a</code> 就是代表数组第一个元素的地址。</p><p>所以，<code>a</code> 实际上等效于 <code>&amp;a[0]</code> 。因此，声明数组指针时不需要使用 <code>&amp;</code> 符号。</p><h3 id="用数组指针访问数组元素"><a href="#用数组指针访问数组元素" class="headerlink" title="用数组指针访问数组元素"></a>用数组指针访问数组元素</h3><p>知道如何声明数组指针之后，那要怎么访问数组的每一个元素呢？</p><p>对于数组中的元素，它们的存储是连续的，即它们的地址是相邻的。</p><p>而指针指向地址，如果对指针进行加减的操作，实际上就是改变指针指向的地址。</p><p>我们通过一张图片来直观感受以下：</p><img src="https://ci.cncn3.cn/85d6fb706adc6bab9ce6be9d370e0445.png" title="" alt="85d6fb706adc6bab9ce6be9d370e0445.png" data-align="center"><p>从上图可以看出使用指针访问数组的语法。我们用一个使用该语法输出数组中所有元素的例子来加深理解。</p><p>示例程序 8.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>  a[ArSize] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* ptr = a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize; i++)</span><br><span class="line">        std::cout &lt;&lt; *(ptr + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初探-new-和-delete"><a href="#初探-new-和-delete" class="headerlink" title="初探 new 和 delete"></a>初探 <code>new</code> 和 <code>delete</code></h2><p>前面介绍过，指针不能指向未知的地址。即你不能这么写 <code>int* ptr = 5;</code> 。</p><p>但如果我想声明一个指针，并且它的值是 5 ，那要怎么做呢？</p><p>指针是指向一个地址，如果我们可以将一块未分配的地址分配出来并用指针指向它，这样就可以实现我们的目的了。</p><p>而 <code>C++</code> 也提供这样的方法，即使用 <code>new</code> 来分配内存。</p><p>因此我们可以将 <code>int* ptr = 5;</code> 改写成 <code>int* ptr = new int(5);</code> 。</p><p>其中，后面的 <code>int</code> 指定了类型，括号中是要赋的值。</p><p>当我们使用完动态分配的内存之后，我们可以使用 <code>delete</code> 将它 “删除” 。</p><p>比如 <code>delete ptr</code> 。此时，<code>*ptr</code> 指向的就是为分配的地址。</p><p>我们用一个例子来加深理解。</p><p>示例程序 8.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Now *ptr = &quot;</span> &lt;&lt; *ptr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After delete,*ptr = &quot;</span> &lt;&lt; *ptr &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 不要连续将一个指针 <code>delete</code> 两次，那样的结果是危险的。</p></blockquote><p>当 <code>delete</code> 一个指针之后，您可以再次使用 <code>new</code> 来给它分配内存。</p><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>到目前为止，我们接触的数组都是大小确定的数组。但在实际应用中，如果数组太大而实际使用又太少，那就会导致浪费内存；反之，如果数组太小，那也会导致程序运行错误。</p><p>相比于在程序执行之前定义数组大小，能不能在程序执行的阶段来确定数组的大小并创建呢？</p><p>这时，我们就要使用动态数组了。</p><p>动态数组实际上就是数组指针的动态内存分配。</p><p>类比上面的方法，我们声明一个指针 <code>*ptr</code> 为数组指针，它的大小为 <code>5</code> ，其声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="type">int</span>[ArSize];</span><br></pre></td></tr></table></figure><p>如果要初始化，则直接在它后面使用大括号 <code>&#123;&#125;</code> 初始化，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>*      ptr = <span class="keyword">new</span> <span class="type">int</span>[ArSize] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果要用 <code>delete</code> 删除该指针，它的语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>[] ptr;</span><br></pre></td></tr></table></figure><p>那么，为什么说它是动态的数组呢？</p><p>因为，在上面的例子中，<code>ArSize</code> 可以是一个变量，因为 <code>int* ptr = new int[ArSize]</code> 实际上是申请内存，这就意为着，<code>ArSize</code> 可以是一个变量。</p><p>由此，我们就实现了动态数组。下面看一个具体例子：</p><p>示例程序 8.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ArSize = <span class="number">0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input array\&#x27;s size: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; ArSize;    <span class="comment">//创建动态数组</span></span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[ArSize] &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input numbers:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize; i++)</span><br><span class="line">        std::cin &gt;&gt; *(arr + i);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Array is:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize; i++)</span><br><span class="line">        cout &lt;&lt; *(arr + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] arr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="https://ci.cncn3.cn/724233959d214623e3e4aaa8a0c78a65.png" title="" alt="724233959d214623e3e4aaa8a0c78a65.png" data-align="center"><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>用 <code>new</code> 分配的内存要用 <code>delete</code> 及时清除掉。</p><p>同时，不要对同一个指针连续 <code>delete</code> 两次。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> 数组 </tag>
            
            <tag> new </tag>
            
            <tag> delete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 软件推荐</title>
      <link href="/2022/11/21/ubuntu-software-recommand/"/>
      <url>/2022/11/21/ubuntu-software-recommand/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-软件推荐"><a href="#Ubuntu-软件推荐" class="headerlink" title="Ubuntu 软件推荐"></a>Ubuntu 软件推荐</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>自从转 <code>Ubuntu</code> 之后，因为系统生态的原因，我不得不寻找 <code>Windows</code> 下各种软件的替代品。这篇文章就是分享我在 <code>Ubuntu</code> 上使用的各种软件。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="代码编辑器：-Visual-Studio-Code"><a href="#代码编辑器：-Visual-Studio-Code" class="headerlink" title="代码编辑器： Visual Studio Code"></a>代码编辑器： <code>Visual Studio Code</code></h3><p>先放一张截图：</p><img src="https://ci.cncn3.cn/4202084f6eb8ff1565896a7ecc861c72.png" title="" alt="4202084f6eb8ff1565896a7ecc861c72.png" data-align="center"><p>这个由微软发布代码编辑器深受大众喜爱。如果您要下载它，建议不要使用 <code>Snap</code> 商店。因为它不支持中文输入。</p><p>这里直接放出官网的下载链接：<a href="https://code.visualstudio.com/Download">Download VsCode</a> 。</p><p>如果访问和下载速度较慢，则可以使用我的网盘进行下载： <a href="https://share.purkit.ml/Linux%20Software/Ubuntu-share/code_1.72.0-1664926972_amd64.deb">网盘下载</a> 。</p><p>这里再顺便提一下我安装的 <code>VsCode</code> 插件和一些配置。</p><h4 id="安装-C-环境"><a href="#安装-C-环境" class="headerlink" title="安装 C++ 环境"></a>安装 <code>C++</code> 环境</h4><p>使用 <code>VsCode</code> 编写代码并运行需要安装一些插件和配置一些环境。相关的教程很多，这里以配置 <code>C++</code> 环境为例。</p><p>首先下载 <code>gcc</code> 、<code>g++</code> 和 <code>gdb</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gcc</span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure><p>然后通过以下指令查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br><span class="line">gdb -v</span><br></pre></td></tr></table></figure><p>如果显示版本号则说明安装成功。</p><p>接下来安装插件。</p><p>在扩展商店中搜索并安装 <code>C/C++</code> 和 <code>C/C++ Extension Pack</code> 。</p><p>然后安装 <code>Code Runner</code> 。该插件用于运行代码。</p><p>此时打开设置 <code>Settings</code> ，您可以点击快捷键 <code>Ctrl + ,</code> 进入设置界面。搜索 <code>Run In Terminal</code> ，将 <code>Whether to run code in integrated Terminal</code> 勾选。这样您就可以在终端里看到自己运行代码的结果了。</p><p>如果您需要配置调试环境的话，请参阅这篇文章： <a href="https://zhuanlan.zhihu.com/p/80659895">配置调试环境</a> 。</p><p>如果不配置调试环境其实也能运行代码，只是不能调试。</p><p>如果您觉得字体太小，您可以在 <code>Settings</code> 中搜索 <code>zoom</code> ，将 <code>Editor: Mouse Wheel Zoom</code> 勾选，这样您就可以使用 <code>Ctrl + 滚轮</code> 进行缩放编辑界面大小了。</p><p>如果您想配置其它语言的环境，可以上网查找相关教程。</p><p>如果您用过 <code>Visual Studio</code> ，您一定会喜欢其中的自动格式化代码，而 <code>VsCode</code> 中没有内置这一功能。所以我们需要自行配置。</p><p>我使用的是 <code>clang</code> 进行格式化，首先在终端中运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install clang</span><br></pre></td></tr></table></figure><p>然后使用如下指令查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -v</span><br></pre></td></tr></table></figure><p>然后在打开的文件夹下新建一个名为 <code>.clang-format</code> 的文件。</p><p>在其中填入配置信息，这里提供我自己的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"># 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto</span><br><span class="line">Language:        Cpp</span><br><span class="line"># BasedOnStyle:  LLVM</span><br><span class="line"># 访问说明符(public、private等)的偏移</span><br><span class="line">AccessModifierOffset: -4</span><br><span class="line"># 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)</span><br><span class="line">AlignAfterOpenBracket: Align</span><br><span class="line"># 对齐数组列</span><br><span class="line">AlignArrayOfStructures: None</span><br><span class="line"># 对齐连续宏定义</span><br><span class="line">AlignConsecutiveMacros: None</span><br><span class="line"># 连续赋值时，对齐所有等号</span><br><span class="line">AlignConsecutiveAssignments: None</span><br><span class="line"># 对齐连续位字段</span><br><span class="line">AlignConsecutiveBitFields: None</span><br><span class="line"># 连续声明时，对齐所有声明的变量名</span><br><span class="line">AlignConsecutiveDeclarations: true</span><br><span class="line"># 左对齐逃脱换行(使用反斜杠换行)的反斜杠</span><br><span class="line">AlignEscapedNewlines: Left</span><br><span class="line"># 水平对齐二元和三元表达式的操作数</span><br><span class="line">AlignOperands:   Align</span><br><span class="line"># 对齐连续的尾随的注释</span><br><span class="line">AlignTrailingComments: true</span><br><span class="line"># 允许函数声明的所有参数在放在下一行</span><br><span class="line">AllowAllParametersOfDeclarationOnNextLine: true</span><br><span class="line"># 允许短的枚举放在同一行</span><br><span class="line">AllowShortEnumsOnASingleLine: true</span><br><span class="line"># 允许短的块放在同一行</span><br><span class="line">AllowShortBlocksOnASingleLine: Never</span><br><span class="line"># 允许短的case标签放在同一行</span><br><span class="line">AllowShortCaseLabelsOnASingleLine: false</span><br><span class="line"># 允许短的函数放在同一行</span><br><span class="line">AllowShortFunctionsOnASingleLine: Inline</span><br><span class="line"># 允许短的匿名函数放在同一行</span><br><span class="line">AllowShortLambdasOnASingleLine: All</span><br><span class="line"># 允许短的if语句保持在同一行</span><br><span class="line">AllowShortIfStatementsOnASingleLine: Never</span><br><span class="line"># 允许短的循环保持在同一行</span><br><span class="line">AllowShortLoopsOnASingleLine: false</span><br><span class="line"># 总是在返回类型后换行</span><br><span class="line">AlwaysBreakAfterReturnType: None</span><br><span class="line"># 总是在多行string字面量前换行</span><br><span class="line">AlwaysBreakBeforeMultilineStrings: false</span><br><span class="line"># 总是在template声明后换行</span><br><span class="line">AlwaysBreakTemplateDeclarations: MultiLine</span><br><span class="line">AttributeMacros:</span><br><span class="line">  - __capability</span><br><span class="line"># false表示函数实参要么都在同一行，要么都各自一行</span><br><span class="line">BinPackArguments: true</span><br><span class="line"># false表示所有形参要么都在同一行，要么都各自一行</span><br><span class="line">BinPackParameters: true</span><br><span class="line"># 大括号换行，只有当 BreakBeforeBraces 设置为Custom时才有效</span><br><span class="line">BraceWrapping:</span><br><span class="line">  AfterCaseLabel:  true</span><br><span class="line">  AfterClass:      true</span><br><span class="line">  AfterControlStatement: Always</span><br><span class="line">  AfterEnum:       false</span><br><span class="line">  AfterFunction:   true</span><br><span class="line">  AfterNamespace:  true</span><br><span class="line">  AfterObjCDeclaration: false</span><br><span class="line">  AfterStruct:     true</span><br><span class="line">  AfterUnion:      true</span><br><span class="line">  AfterExternBlock: false</span><br><span class="line">  BeforeCatch:     true</span><br><span class="line">  BeforeElse:      true</span><br><span class="line">  BeforeLambdaBody: false</span><br><span class="line">  BeforeWhile:     false</span><br><span class="line">  IndentBraces:    false</span><br><span class="line">  SplitEmptyFunction: false</span><br><span class="line">  SplitEmptyRecord: true</span><br><span class="line">  SplitEmptyNamespace: true</span><br><span class="line"># 在二元运算符前换行</span><br><span class="line">BreakBeforeBinaryOperators: None</span><br><span class="line"># 在concept前换行</span><br><span class="line">BreakBeforeConceptDeclarations: true</span><br><span class="line"># 在大括号前换行: Attach(始终将大括号附加到周围的上下文)</span><br><span class="line">BreakBeforeBraces: Custom</span><br><span class="line"># 继承列表样式</span><br><span class="line">BreakInheritanceList:  AfterColon</span><br><span class="line"># 在三元运算符前换行</span><br><span class="line">BreakBeforeTernaryOperators: true</span><br><span class="line"># 构造函数初始值设定项换行样式</span><br><span class="line">BreakConstructorInitializers: BeforeComma</span><br><span class="line"># 在java字段的注释后换行</span><br><span class="line">BreakAfterJavaFieldAnnotations: false</span><br><span class="line"># 每行字符的限制，0表示没有限制</span><br><span class="line">ColumnLimit:     60</span><br><span class="line"># 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变</span><br><span class="line">CommentPragmas:  &#x27;^ IWYU pragma:&#x27;</span><br><span class="line"># 在新行上声明每个命名空间</span><br><span class="line">CompactNamespaces: false</span><br><span class="line"># 构造函数的初始化列表的缩进宽度</span><br><span class="line">ConstructorInitializerIndentWidth: 4</span><br><span class="line"># 延续的行的缩进宽度</span><br><span class="line">ContinuationIndentWidth: 4</span><br><span class="line"># 去除C++11的列表初始化的大括号&#123;后和&#125;前的空格</span><br><span class="line">Cpp11BracedListStyle: true</span><br><span class="line"># 继承最常用的换行方式</span><br><span class="line">DeriveLineEnding: true</span><br><span class="line"># 继承最常用的指针和引用的对齐方式</span><br><span class="line">DerivePointerAlignment: false</span><br><span class="line"># 关闭格式化</span><br><span class="line">DisableFormat:   false</span><br><span class="line"># 删除访问修饰符后的所有空行</span><br><span class="line">EmptyLineAfterAccessModifier: Never</span><br><span class="line"># 仅当访问修饰符开始一个新的逻辑块时才添加空行</span><br><span class="line">EmptyLineBeforeAccessModifier: LogicalBlock</span><br><span class="line"># 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)</span><br><span class="line">ExperimentalAutoDetectBinPacking: false</span><br><span class="line"># 自动补充namespace注释</span><br><span class="line">FixNamespaceComments: true</span><br><span class="line"># 需要被解读为foreach循环而不是函数调用的宏</span><br><span class="line">ForEachMacros:</span><br><span class="line">  - foreach</span><br><span class="line">  - Q_FOREACH</span><br><span class="line">  - BOOST_FOREACH</span><br><span class="line">IfMacros:</span><br><span class="line">  - KJ_IF_MAYBE</span><br><span class="line"># 多个#include块合并在一起并排序为一个</span><br><span class="line">IncludeBlocks:   Merge</span><br><span class="line"># 可以定义负数优先级从而保证某些#include永远在最前面</span><br><span class="line">IncludeCategories:</span><br><span class="line">  - Regex:           &#x27;^&quot;(llvm|llvm-c|clang|clang-c)/&#x27;</span><br><span class="line">    Priority:        2</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">  - Regex:           &#x27;^(&lt;|&quot;(gtest|gmock|isl|json)/)&#x27;</span><br><span class="line">    Priority:        3</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">  - Regex:           &#x27;.*&#x27;</span><br><span class="line">    Priority:        1</span><br><span class="line">    SortPriority:    0</span><br><span class="line">    CaseSensitive:   false</span><br><span class="line">IncludeIsMainRegex: &#x27;(Test)?$&#x27;</span><br><span class="line">IncludeIsMainSourceRegex: &#x27;&#x27;</span><br><span class="line"># 缩进访问修饰符</span><br><span class="line">IndentAccessModifiers: false</span><br><span class="line"># 缩进case标签</span><br><span class="line">IndentCaseLabels: true</span><br><span class="line"># case 标签后面的块使用与 case 标签相同的缩进级别</span><br><span class="line">IndentCaseBlocks: false</span><br><span class="line"># 缩进goto标签。</span><br><span class="line">IndentGotoLabels: false</span><br><span class="line"># 缩进预处理器指令</span><br><span class="line">IndentPPDirectives: None</span><br><span class="line"># 向后兼容缩进外部块</span><br><span class="line">IndentExternBlock: AfterExternBlock</span><br><span class="line"># 缩进模板中的requires子句</span><br><span class="line">IndentRequires:  false</span><br><span class="line"># 缩进宽度</span><br><span class="line">IndentWidth:     4</span><br><span class="line"># 函数返回类型换行时，缩进函数声明或函数定义的函数名</span><br><span class="line">IndentWrappedFunctionNames: false</span><br><span class="line"># 插入尾随逗号</span><br><span class="line">InsertTrailingCommas: None</span><br><span class="line"># 保留JavaScript字符串引号</span><br><span class="line">JavaScriptQuotes: Leave</span><br><span class="line"># 包装 JavaScript 导入/导出语句</span><br><span class="line">JavaScriptWrapImports: true</span><br><span class="line"># 保留在块开始处的空行</span><br><span class="line">KeepEmptyLinesAtTheStartOfBlocks: true</span><br><span class="line"># 相对于 lambda 签名对齐 lambda 主体</span><br><span class="line">LambdaBodyIndentation: Signature</span><br><span class="line"># 开始一个块的宏的正则表达式</span><br><span class="line">MacroBlockBegin: &#x27;&#x27;</span><br><span class="line"># 结束一个块的宏的正则表达式</span><br><span class="line">MacroBlockEnd:   &#x27;&#x27;</span><br><span class="line"># 连续空行的最大数量</span><br><span class="line">MaxEmptyLinesToKeep: 4</span><br><span class="line"># 命名空间的缩进</span><br><span class="line">NamespaceIndentation: All</span><br><span class="line">ObjCBinPackProtocolList: Auto</span><br><span class="line"># 使用ObjC块时缩进宽度</span><br><span class="line">ObjCBlockIndentWidth: 4</span><br><span class="line">ObjCBreakBeforeNestedBlockParam: true</span><br><span class="line"># 在ObjC的@property后添加一个空格</span><br><span class="line">ObjCSpaceAfterProperty: false</span><br><span class="line"># 在ObjC的protocol列表前添加一个空格</span><br><span class="line">ObjCSpaceBeforeProtocolList: true</span><br><span class="line">PenaltyBreakAssignment: 2</span><br><span class="line">PenaltyBreakBeforeFirstCallParameter: 19</span><br><span class="line">PenaltyBreakComment: 300</span><br><span class="line">PenaltyBreakFirstLessLess: 120</span><br><span class="line">PenaltyBreakString: 1000</span><br><span class="line">PenaltyBreakTemplateDeclaration: 10</span><br><span class="line">PenaltyExcessCharacter: 1000000</span><br><span class="line">PenaltyReturnTypeOnItsOwnLine: 60</span><br><span class="line">PenaltyIndentedWhitespace: 0</span><br><span class="line"># 指针的对齐: Left, Right, Middle</span><br><span class="line">PointerAlignment: Left</span><br><span class="line"># 缩进预处理器语句的列数</span><br><span class="line">PPIndentWidth:   -1</span><br><span class="line"># 引用的对齐</span><br><span class="line">ReferenceAlignment: Pointer</span><br><span class="line"># 允许重新排版注释</span><br><span class="line">ReflowComments:  true</span><br><span class="line"># 短命名空间跨越的最大展开行数</span><br><span class="line">ShortNamespaceLines: 1</span><br><span class="line"># 允许排序#include</span><br><span class="line">SortIncludes:    CaseSensitive</span><br><span class="line"># java静态导入放在非静态导入之前</span><br><span class="line">SortJavaStaticImport: Before</span><br><span class="line"># 对using声明排序</span><br><span class="line">SortUsingDeclarations: true</span><br><span class="line"># 在C风格类型转换后添加空格</span><br><span class="line">SpaceAfterCStyleCast: false</span><br><span class="line"># 在!后添加空格</span><br><span class="line">SpaceAfterLogicalNot: false</span><br><span class="line"># 在Template关键字后添加空格</span><br><span class="line">SpaceAfterTemplateKeyword: true</span><br><span class="line"># 在赋值运算符之前添加空格</span><br><span class="line">SpaceBeforeAssignmentOperators: true</span><br><span class="line"># 不在case冒号之前添加空格</span><br><span class="line">SpaceBeforeCaseColon: false</span><br><span class="line"># 不在C++11大括号列表之前添加空格</span><br><span class="line">SpaceBeforeCpp11BracedList: true</span><br><span class="line"># 在构造函数初始化器冒号之前添加空格</span><br><span class="line">SpaceBeforeCtorInitializerColon: true</span><br><span class="line"># 在继承冒号前添加空格</span><br><span class="line">SpaceBeforeInheritanceColon: true</span><br><span class="line"># 开圆括号之前添加一个空格: Never, ControlStatements, Always</span><br><span class="line">SpaceBeforeParens: ControlStatements</span><br><span class="line"># 不要确保指针限定符周围有空格，而是使用 PointerAlignment</span><br><span class="line">SpaceAroundPointerQualifiers: Default</span><br><span class="line"># 在基于范围的for循环冒号之前添加空格</span><br><span class="line">SpaceBeforeRangeBasedForLoopColon: true</span><br><span class="line"># &#123;&#125;中间不添加空格</span><br><span class="line">SpaceInEmptyBlock: false</span><br><span class="line"># 在空的圆括号中添加空格</span><br><span class="line">SpaceInEmptyParentheses: false</span><br><span class="line"># 在尾随的评论前添加的空格数(只适用于//)</span><br><span class="line">SpacesBeforeTrailingComments: 1</span><br><span class="line"># 在尖括号的&lt;后和&gt;前添加空格</span><br><span class="line">SpacesInAngles:  Never</span><br><span class="line"># 不在if/for/switch/while条件周围插入空格</span><br><span class="line">SpacesInConditionalStatement: false</span><br><span class="line"># 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格</span><br><span class="line">SpacesInContainerLiterals: true</span><br><span class="line"># 在C风格类型转换的括号中添加空格</span><br><span class="line">SpacesInCStyleCastParentheses: false</span><br><span class="line"># 行注释开头允许有多少个空格。要禁用最大值，请将其设置为-1，除此之外，最大值优先于最小值</span><br><span class="line">SpacesInLineCommentPrefix:</span><br><span class="line">  Minimum:         1</span><br><span class="line">  Maximum:         -1</span><br><span class="line"># 在圆括号的(后和)前添加空格</span><br><span class="line">SpacesInParentheses: false</span><br><span class="line"># 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响</span><br><span class="line">SpacesInSquareBrackets: false</span><br><span class="line"># 不在[前添加空格</span><br><span class="line">SpaceBeforeSquareBrackets: false</span><br><span class="line"># 位域:每边都添加空格</span><br><span class="line">BitFieldColonSpacing: Both</span><br><span class="line"># 标准</span><br><span class="line">Standard:        Auto</span><br><span class="line"># 在语句前面被忽略的宏定义，就好像它们是一个属性一样</span><br><span class="line">StatementAttributeLikeMacros:</span><br><span class="line">  - Q_EMIT</span><br><span class="line"># 应该被解释为完整语句的宏定义</span><br><span class="line">StatementMacros:</span><br><span class="line">  - Q_UNUSED</span><br><span class="line">  - QT_REQUIRE_VERSION</span><br><span class="line"># tab宽度</span><br><span class="line">TabWidth:        4</span><br><span class="line"># 使用\n换行</span><br><span class="line">UseCRLF:         false</span><br><span class="line"># 使用tab字符：ForIndentation——仅将制表符用于缩进</span><br><span class="line">UseTab:          ForIndentation</span><br><span class="line"># 对空格敏感的宏定义</span><br><span class="line">WhitespaceSensitiveMacros:</span><br><span class="line">  - STRINGIZE</span><br><span class="line">  - PP_STRINGIZE</span><br><span class="line">  - BOOST_PP_STRINGIZE</span><br><span class="line">  - NS_SWIFT_NAME</span><br><span class="line">  - CF_SWIFT_NAME</span><br></pre></td></tr></table></figure><p>您也可以参考<a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html">官方文档</a> 进行配置。</p><p>完成这一步之后，打开 <code>Settings</code> ，搜索 <code>format</code> ，将以下几个选项勾选：</p><img src="https://ci.cncn3.cn/9f034f12d742653b01321b99af290200.png" title="" alt="9f034f12d742653b01321b99af290200.png" data-align="center"><p>这样，您就可以在打字和保存文件的时候进行代码格式化了。</p><h4 id="代码前端插件推荐"><a href="#代码前端插件推荐" class="headerlink" title="代码前端插件推荐"></a>代码前端插件推荐</h4><ul><li><code>indent-rainbow</code></li></ul><p>该插件可以用彩虹色为您标明行首的空格以及 <code>Tab</code> 宽度。</p><ul><li><code>TabOut</code></li></ul><p>如果您也和我一样，喜欢使用 <code>Tab</code> 键来跳出括号或者引号，那么这个插件是一个不错</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>看得顺眼的主题可以让您在敲代码时少些疲惫。</p><p>通过上方的截图，您或许看到了我使用的发光主题以及透明背景。</p><p>我使用的主题是 <code>SynthWave &#39;84</code> ，安装之后，启用该主题，字体并不会发光。您需要点击 <code>Ctrl + Shift + P</code> ，输入 <code>Enable Neon Dreams</code> ，然后打开该选项。在 <code>Ubuntu</code> 平台下，右下角会弹出提示，要求以管理员身份运行 <code>VsCode</code> 。</p><p>如果要以管理员身份运行 <code>VsCode</code> ，在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$&#123;whoami&#125;</span> /usr/share/code</span><br></pre></td></tr></table></figure><p>将 <code>$&#123;whoami&#125;</code> 替换为您的用户名。如果要移除 <code>VsCode</code> 的管理员权限，则使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R root /usr/share/code</span><br></pre></td></tr></table></figure><p>此时，您就可以成功打开霓虹灯了。</p><p>接下来是修改背景透明度。搜索并安装插件 <code>GlassIt-VSC</code> ，启用之后，您可以使用快捷键 <code>Ctrl + Alt + Z</code> 和 <code>Ctrl + Alt + C</code> 进行透明度的调整。</p><p><code>VsCode</code> 默认的文件图标也许并不好看，您可以使用 <code>vscode-icons</code> 来更改文件图标。</p><h2 id="音乐软件的替代品：洛雪音乐助手"><a href="#音乐软件的替代品：洛雪音乐助手" class="headerlink" title="音乐软件的替代品：洛雪音乐助手"></a>音乐软件的替代品：洛雪音乐助手</h2><p>如果您想要一款跨平台并且包含海量歌曲的音乐软件，那么洛雪音乐助手将是一个不错的选择，除了上述的特点以外，它还有一个最大的特点就是，它的所有音乐都是免费的并且支持下载。</p><p>您可以在 <code>GitHub</code> 上找到它： <a href="https://github.com/lyswhut/lx-music-desktop">洛雪音乐助手</a> 。</p><p>下载您可以通过 <a href="https://github.com/lyswhut/lx-music-desktop/releases">Releases 页面</a> 或者 <a href="https://share.purkit.ml/Linux%20Software/Ubuntu-share/lx-music-desktop.v1.22.3.x64.deb">我的网盘</a> 进行下载。</p><p>对于该软件的使用，您可以参阅 <a href="https://lxmusic.toside.cn/">官方文档</a> 。</p><p>这里我简单地介绍一下它的下载功能和桌面歌词功能。</p><p>首先是它的下载功能。软件默认是不开启下载功能的。</p><p>您可以在设置中打开该功能并进行配置。</p><img src="https://ci.cncn3.cn/189e9be52783eba9f4c4acb233bb7ce2.png" title="" alt="189e9be52783eba9f4c4acb233bb7ce2.png" data-align="center"><p>接下来是它的桌面歌词，我觉得洛雪音乐助手的桌面歌词非常简洁，比市面上的音乐软件的桌面歌词好看很多。</p><p>放一张截图：</p><img src="https://ci.cncn3.cn/525b79485970ed2b945325af1f9d8a62.png" title="" alt="525b79485970ed2b945325af1f9d8a62.png" data-align="center"><p>右边绿色的就是洛雪的桌面歌词。</p><p>同样的，您可以在设置中打开并设置它。</p><img src="https://ci.cncn3.cn/46672999414bfd02cc8ef2e4fa437ec9.png" title="" alt="46672999414bfd02cc8ef2e4fa437ec9.png" data-align="center"><h2 id="QQ-的客户端"><a href="#QQ-的客户端" class="headerlink" title="QQ 的客户端"></a><code>QQ</code> 的客户端</h2><p>我本人是十分不喜欢 <code>QQ</code> 的，但为了和周围的人保持联系，只能使用比较大众的 <code>QQ</code> 进行即时通讯。</p><p>如果您使用的是 <code>Ubuntu</code> ，那就不难发现，官方 <code>Linux</code> 版的 <code>QQ</code> 做的实在差劲。</p><p>于是我们需要一些第三方的客户端。这里我提供两种。</p><p>一种是 <code>VsCode</code> 的扩展。直接在扩展商店中搜索 <code>QQ</code> 就可以安装了。这种的 <code>QQ</code> 功能很少，不能收发文件。</p><p>还有一种是 <code>Icalingua++</code> ，它是一个 <code>QQ</code> 的第三方客户端。您可以在这里看到关于它的介绍：<a href="https://github.com/Icalingua-plus-plus/Icalingua-plus-plus">Icalingua++</a> 。</p><p>使用它有一定风险，因为腾讯是不喜欢别人动摇它的垄断地位的，所以，使用第三方客户端会有冻结账号的风险，读者们量力而行。</p><p>对于它的下载，您可以在 <a href="https://github.com/Icalingua-plus-plus/Icalingua-plus-plus/releases">Releases 页面</a> 进行下载也可以在 <a href="https://share.purkit.ml/Linux%20Software/Ubuntu-share/icalingua_2.7.5_amd64.deb">我的网盘</a> 进行下载。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（七）</title>
      <link href="/2022/11/18/cpp-7/"/>
      <url>/2022/11/18/cpp-7/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（七）"><a href="#C-教程（七）" class="headerlink" title="C++ 教程（七）"></a>C++ 教程（七）</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="声明结构体与创建结构体变量"><a href="#声明结构体与创建结构体变量" class="headerlink" title="声明结构体与创建结构体变量"></a>声明结构体与创建结构体变量</h3><p>关于结构体，我们首先用一个问题引入：怎么记录一个班级所有学生的座号、名字和成绩？</p><p>也许，以您现有的知识，您会创建三个数组，然后分别记录这三个信息。</p><p>但是这样存在一个问题，就是这三个数组不易管理。</p><p>那么是否存在一种方法，使得这些信息便于管理？</p><p>这里，我们使用结构体来实现这一目的。</p><p>未来，我们会使用更加高级的类来实现这一目的。</p><p>结构体使用关键字 <code>struct</code> 声明。</p><p>比如，我们声明一个 <code>Student</code> 结构体，那么 <code>C++</code> 实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         SitNumber;</span><br><span class="line">    <span class="type">int</span>         Score;</span><br><span class="line">&#125;;    <span class="comment">// 注意分号 ;</span></span><br></pre></td></tr></table></figure><p>其中， <code>Student</code> 是类型名，<code>Name</code> 、<code>SitNumber</code> 和 <code>Score</code> 是成员。</p><p>以上是声明结构体的方法。接下来，我们来看如何创建结构体变量。</p><p>我们可以像使用 <code>int</code> 、<code>double</code> 等类型一样来使用 <code>Student</code> 创建变量。</p><p>当然，我们也可以在声明结构体的同时声明变量。</p><p>该示例程序还演示了结构体所占的字节数是多少。</p><p>示例程序 7.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 Student 变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         SitNumber;</span><br><span class="line">    <span class="type">int</span>         Score;</span><br><span class="line">&#125; stu1, stu2; <span class="comment">// 在声明结构体的同时声明变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    Student stu3; <span class="comment">// 普通的声明方式</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of string: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(std::string)</span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of int: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of Student: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Student) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/9e81ddf4458837cc11a5a45d7304a16a.png" alt="9e81ddf4458837cc11a5a45d7304a16a.png"></p><p>注意，<code>Student</code> 结构体包含了两个 <code>int</code> 类型的数据。</p><p>通过输出我们可以得出结构体所占的字节数等于它各个成员所占字节数只和。</p><h3 id="访问成员和结构体初始化"><a href="#访问成员和结构体初始化" class="headerlink" title="访问成员和结构体初始化"></a>访问成员和结构体初始化</h3><p>在介绍完声明结构体和结构体变量之后，我们介绍如何访问结构体的成员。</p><p><code>C++</code> 中，使用 <code>.</code> 符号进行访问结构体成员。</p><p>当我们访问成员之后，就可以将这个整体看成成员对应的类型。</p><p>比如 <code>stu1.Name</code> 就是访问 <code>stu1</code> 的 <code>Name</code> 成员。此时，我们将 <code>stu1.Name</code> 看作是 <code>string</code> 类型。</p><p>这就意味着，我们可以像使用 <code>string</code> 一样使用 <code>stu1.Name</code> ，包括输出和赋值。</p><p>示例程序 7.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         SitNumber;</span><br><span class="line">    <span class="type">int</span>         Score;</span><br><span class="line">&#125; stu1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stu1.Name = <span class="string">&quot;Purkit&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please input sit number:\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; stu1.SitNumber;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please input this student&#x27;s score:\n&quot;</span>;</span><br><span class="line">    std::cin &gt;&gt; stu1.Score;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; stu1.Name &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Sit number: &quot;</span> &lt;&lt; stu1.SitNumber &lt;&lt; <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Score: &quot;</span> &lt;&lt; stu1.Score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入输出示例如下：</p><p><img src="https://ci.cncn3.cn/147f27524f3a73e4212f582b900182a0.png" alt="147f27524f3a73e4212f582b900182a0.png"></p><p>如果我要使 <code>SitNumber</code> 和 <code>Score</code> 默认为 <code>0</code> ，那要怎么操作呢？</p><p>这里，我们可以使用类似类的构造函数的方法或者直接赋值的方法进行。</p><p>示例程序 7.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student1</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         Score;</span><br><span class="line">    <span class="type">int</span>         SitNumber;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student1</span>() &#123; Score = SitNumber = <span class="number">0</span>; &#125;</span><br><span class="line">&#125; stu1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student2</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         Score = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>         SitNumber = <span class="number">0</span>;</span><br><span class="line">&#125; stu2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In Student1:&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stu1.Score = &quot;</span> &lt;&lt; stu1.Score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stu1.SitNumber = &quot;</span> &lt;&lt; stu1.SitNumber &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In Student2: &quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stu2.Score = &quot;</span> &lt;&lt; stu2.Score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stu2.SitNumber = &quot;</span> &lt;&lt; stu2.SitNumber &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要初始化一个结构体变量，我们不仅可以使用简单的赋值，也可以通过别的方式进行。</p><p>比如像初始化数组一样，使用大括号 <code>&#123;&#125;</code> 初始化结构体。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    <span class="type">int</span>         SitNumber;</span><br><span class="line">    <span class="type">int</span>         Score;</span><br><span class="line">&#125; stu1 = &#123;<span class="string">&quot;Purkit&quot;</span>, <span class="number">80</span>, <span class="number">75</span>&#125;, stu2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法：</span></span><br><span class="line"><span class="comment">// stu2 = &#123;&quot;Error&quot;, -1, -1&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line">    stu2 = stu1;    <span class="comment">//直接将整个 stu1 结构体赋值给 stu2</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; stu1.Name &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SitNumber: &quot;</span> &lt;&lt; stu1.SitNumber &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Score: &quot;</span> &lt;&lt; stu1.Score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; stu2.Name &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SitNumber: &quot;</span> &lt;&lt; stu2.SitNumber &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Score: &quot;</span> &lt;&lt; stu2.Score &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，您也可以使用构造函数的方法进行初始化。</p><p>如果这么做，就有点违背结构体存在的意义了。我们一般在类中使用构造函数，如果给结构体定义构造函数或者方法，就会显得有点不伦不类了。</p><p>因此，我们建议在定义默认值的时候采用 示例程序 7.3 中 <code>Student2</code> 的定义方法。</p><p>如果是初始化，则建议使用类似数组的初始化方式。</p><h3 id="结构体与指针"><a href="#结构体与指针" class="headerlink" title="结构体与指针"></a>结构体与指针</h3><p>上一篇博文中我们介绍了 <code>C++</code> 中的指针。</p><p>那么结构体的指针有什么不同之处呢？</p><p>在声明上，结构体指针的声明方式和普通类型的声明方式是一样的。</p><p>但是，在访问成员的时候，则需要注意符号的使用。</p><p>比如，我们定义一个结构体为 <code>Node</code> ，其中包含两个 <code>int</code> 为 <code>x</code> 和 <code>y</code> 。</p><p>声明一个 <code>Node</code> 结构体变量为 <code>n1</code> ，声明一个指针 <code>*ptr</code> 指向 <code>n1</code> 。</p><p>要使用该指针对 <code>n1</code> 的成员进行赋值等操作则需要注意访问的语法。</p><p>如果只使用 <code>ptr</code> ，则需要使用 <code>-&gt;</code> 进行访问成员。如果使用 <code>*ptr</code> ，则使用 <code>.</code> 进行访问成员。</p><p>示例程序 7.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line"></span><br><span class="line">    Node  n1;</span><br><span class="line">    Node* ptr = &amp;n1;</span><br><span class="line"></span><br><span class="line">    ptr-&gt;x = <span class="number">10</span>;</span><br><span class="line">    (*ptr).y = <span class="number">20</span>;    <span class="comment">//注意运算符优先级</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; ptr-&gt;x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; (*ptr).y &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于指针，我们建议使用 <code>-&gt;</code> 访问成员。</p><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p>我们在生活中会用到许多账号，这些账号有长有短，如果要对它们进行存储，要使用什么类型呢？</p><p>对于相对长的账号，我们也许使用字符串进行存储。</p><p>如果是比较短的账号，使用字符串进行存储就显得有点浪费空间了。</p><p>如果我们希望对于长的账号使用字符串进行存储，而对于短的账号使用 <code>int</code> 或者 <code>long long</code> 进行存储。那要怎么实现呢？</p><p>这里我们就需要用到 <code>C++</code> 中的共用体。</p><p>共用体的关键字为 <code>union</code> ，它的声明方式和结构体类似。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  int_val; <span class="comment">// or long long long_long_val;</span></span><br><span class="line">    <span class="type">char</span> ch_val[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于一个 <code>Account</code> 对象，它的类型在一定时刻内只能是共用体中的一种。</p><p>我们直接看示例。</p><p>示例程序 7.5</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  int_val; <span class="comment">// or long long long_long_val;</span></span><br><span class="line">    <span class="type">char</span> ch_val[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    Account a1;</span><br><span class="line">    <span class="type">bool</span>    account_type;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input the type of account(0 is short,1 &quot;</span></span><br><span class="line">            <span class="string">&quot;is long): &quot;</span></span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line">    std::cin &gt;&gt; account_type;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input your account:&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (account_type)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a1.ch_val;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Your account: &quot;</span> &lt;&lt; a1.ch_val &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a1.int_val;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Your account: &quot;</span> &lt;&lt; a1.int_val &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/891580a4003d907a416b30387c01bf26.png" alt="891580a4003d907a416b30387c01bf26.png"></p><p>既然共用体和结构体那么相似，那为什么会存在共用体呢？</p><p>这里我们观察以下共用体所占的字节数：</p><p>示例程序 7.6</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>  int_val;</span><br><span class="line">    <span class="type">char</span> ch_val[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>[<span class="number">20</span>]) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(Account) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/d6bcaee3cc7a62e02fbe3997be78d269.png" alt="d6bcaee3cc7a62e02fbe3997be78d269.png"></p><p>可以看到，共用体所占的字节数的大小取决于它内部最大的类型所占的字节数。</p><p>这就是共用体存在的意义：节省空间。</p><p>这一篇博客的内容就是这些了。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构体 </tag>
            
            <tag> 共用体 </tag>
            
            <tag> struct </tag>
            
            <tag> union </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu平台下使用Vercel+Hugo搭建静态博客</title>
      <link href="/2022/11/12/hello-hugo/"/>
      <url>/2022/11/12/hello-hugo/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-平台下使用-Vercel-Hugo-搭建静态博客"><a href="#Ubuntu-平台下使用-Vercel-Hugo-搭建静态博客" class="headerlink" title="Ubuntu 平台下使用 Vercel + Hugo 搭建静态博客"></a><code>Ubuntu</code> 平台下使用 <code>Vercel</code> + <code>Hugo</code> 搭建静态博客</h1><blockquote><p>写在前面：虽然本文是在 <code>Ubuntu</code> 系统上操作的，但是 <code>Windows</code> 除了安装的方法不一样之外，其它部分都是大同小异的。所以，如果您是 <code>Windows</code> 用户，可以查找相关环境的安装方法，然后按本文的步骤进行搭建博客。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h3><p>打开终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>安装成功之后，使用以下命令查看 <code>Git</code> 是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果显示 <code>Git</code> 的版本号，则说明安装成功。</p><h3 id="安装-Go-语言"><a href="#安装-Go-语言" class="headerlink" title="安装 Go 语言"></a>安装 <code>Go</code> 语言</h3><h4 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h4><p>您可以使用以下命令安装 <code>Go</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install golang</span><br></pre></td></tr></table></figure><p>如果您不希望使用命令，那么您可以采用以下方法。</p><h4 id="使用-snap-商店"><a href="#使用-snap-商店" class="headerlink" title="使用 snap 商店"></a>使用 <code>snap</code> 商店</h4><p>打开 <code>Ubuntu Software</code> 。</p><img src="https://ci.cncn3.cn/4333928b4a710b00fd5efcda638a1e8b.png" title="" alt="4333928b4a710b00fd5efcda638a1e8b.png" data-align="center"><p>搜索 <code>Go</code> ，找到以下软件。</p><p><img src="https://ci.cncn3.cn/eb05659725a038a3686a12f957ee7014.png" alt="eb05659725a038a3686a12f957ee7014.png"></p><p>然后选择合适的版本安装。</p><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>无论您使用哪一种方法安装，最后都可以使用以下指令查看是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="安装-Hugo"><a href="#安装-Hugo" class="headerlink" title="安装 Hugo"></a>安装 <code>Hugo</code></h3><p>直接在 <code>Ubuntu Software</code> 中搜索 <code>Hugo</code> 。</p><p><img src="https://ci.cncn3.cn/9e86900ed06a5cbc97b1a885276e4861.png" alt="9e86900ed06a5cbc97b1a885276e4861.png"></p><p>进入这个软件。</p><p><strong>注意：</strong> 此时需要选择合适的版本。我使用的版本如下：</p><p><img src="https://ci.cncn3.cn/7125693223ac182c6793fe3a6707886d.png" alt="7125693223ac182c6793fe3a6707886d.png"></p><p>选择的版本将影响到博客主题能否正常使用。</p><p>比如我使用的 <code>stack</code> 主题需要使用该版本。所以，读者可以根据自己需要选择 <code>Hugo</code> 版本。</p><p>最后，使用以下命令查看 <code>Hugo</code> 的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><h3 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 <code>GitHub</code></h3><p>打开网站 <a href="https://github.com/">GitHub</a> 。</p><p>点击 <code>Sign up</code>，按照提示注册 <code>GitHub</code> 账号。</p><p><strong>注意：</strong> 不要使用 QQ 邮箱进行注册，据说会有一些限制。</p><h3 id="注册-Vercel"><a href="#注册-Vercel" class="headerlink" title="注册 Vercel"></a>注册 <code>Vercel</code></h3><p>打开网站 <a href="https://vercel.com/">Vercel</a> 。</p><p>直接使用 <code>GitHub</code> 登录。</p><p>至此，所有的准备工作就完成了。接下来上重头戏。</p><h2 id="搭建-Hugo"><a href="#搭建-Hugo" class="headerlink" title="搭建 Hugo"></a>搭建 <code>Hugo</code></h2><p>在 <code>Vercel</code> 的 <code>dashboard</code> 中，依次点击 <code>Add New... -&gt; Project</code> 。</p><p>在新的界面中，右边有一个 <code>Clone Template</code> 。点击 <code>Browse All Templates →</code>。点击 <code>Hugo</code> 。</p><p>此时，需要我们选择一个仓库来存放 <code>Hugo</code> 博客。在 <code>Create Git Repository</code> 一栏中选择 <code>GitHub</code> 。</p><p>输入仓库名称。</p><p><img src="https://ci.cncn3.cn/f08d1feee3e30c9c0c92f389da0e9097.png" alt="f08d1feee3e30c9c0c92f389da0e9097.png"></p><p>名称可以使用默认名称，无伤大雅。</p><p>等待部署完毕之后，我们需要配置 <code>ssh</code> 来更好地进行上传代码。</p><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a><code>Git</code> 配置</h3><p>打开终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name Example-Name</span><br><span class="line">git config --global user.email Example-Email</span><br></pre></td></tr></table></figure><p>将 <code>Example-Name</code> 和 <code>Example-Email</code> 分别替换成您自己的用户名和邮箱。</p><p>这里的用户名不一定是您 <code>GitHub</code> 上的用户名。这个用户名是您用于 <code>commit</code> 时的用户名。</p><p>关于 <code>commit</code> ，我将马上介绍。</p><p>之后运行以下命令生成 <code>ssh</code> 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>这里直接一路按 <code>Enter</code> 。最后在密钥文件生成的目录下（默认为 <code>/Home/.ssh</code> ）打开文件 <code>id_rsa.pub</code> 。</p><p>复制文件中的所有内容，然后回到 <code>GitHub</code> 。</p><p>点击右上角自己的头像，然后点击 <code>Settings</code> 。</p><p>在新的界面中点击 <code>SSH and GPG keys -&gt; New SSH key</code> 。</p><p><code>Title</code> 随便填，<code>Key type</code> 使用默认的 <code>Authentication Key</code> 。下面的 <code>Key</code> 中粘贴刚刚复制的内容。然后完成。</p><p>接着回到刚刚创建的仓库，复制 <code>SSH</code> 的链接。</p><p><img src="https://ci.cncn3.cn/3d6a88fa5e305b68d6819b1755253212.png" alt="3d6a88fa5e305b68d6819b1755253212.png"></p><p>然后在本地选择一个文件夹，打开终端。这里为了方便，我选择的是桌面文件夹。</p><p>这时，我们要用 <code>Git</code> 将 <code>GitHub</code> 上的仓库克隆到本地。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> your-ssh-link</span><br></pre></td></tr></table></figure><p>将 <code>your-ssh-link</code> 替换成刚刚复制的 <code>SSH</code> 链接。</p><p>此时，桌面上出现一个和仓库同名的文件夹。</p><h3 id="更换-stack-主题"><a href="#更换-stack-主题" class="headerlink" title="更换 stack 主题"></a>更换 <code>stack</code> 主题</h3><p><code>Hugo</code> 拥有许多主题，每种主题的安装方式都有一定差别。</p><p>这里，我以安装我自己使用的 <code>stack</code> 主题为例。</p><blockquote><p>以下内容参考 <a href="https://jinli.cyou/p/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B%E4%B8%89hugo%E4%B8%BB%E9%A2%98stack%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%BC%98%E5%8C%96/">锦李本鲤</a> 。</p></blockquote><p>先将终端的目录切换到刚刚克隆的文件夹中。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hugo-teach/</span><br></pre></td></tr></table></figure><p>接着打开 <code>stack</code> 的 <a href="https://github.com/CaiJimmy/hugo-theme-stack">GitHub 仓库</a> 。</p><p>复制仓库的 <code>https</code> 链接。</p><p><img src="https://ci.cncn3.cn/204811c8a31f85adb0c11d567de15c5b.png" alt="204811c8a31f85adb0c11d567de15c5b.png"></p><p>然后在终端运行以下命令，将该仓库克隆到 <code>themes/hugo-theme-stack</code> 目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack</span><br></pre></td></tr></table></figure><p>接着将 <code>hugo-theme-stack</code> 下 <code>exampleSite</code> 中的内容复制到博客的根目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r themes/hugo-theme-stack/exampleSite/* ./</span><br></pre></td></tr></table></figure><p>删除文件 <code>config.toml</code> ，防止与主题配置文件冲突。</p><p>然后运行以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br><span class="line">hugo server</span><br></pre></td></tr></table></figure><p>打开链接 <code>http://localhost:1313/</code> 就可以看到自己的站点了。</p><p>之后就是配置 <code>config.yaml</code> 文件了。具体的操作请查看主题对应的文档。</p><h2 id="Hugo-使用"><a href="#Hugo-使用" class="headerlink" title="Hugo 使用"></a><code>Hugo</code> 使用</h2><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>在根目录的 <code>content/post</code> 中可以写文章，文章使用 <code>Markdown</code> 语法书写。</p><p>关于 <code>Markdown</code> 的编辑器可以使用 <a href="https://github.com/marktext/marktext">Marktext</a> 。这是一个开源并且免费的编辑器。</p><p>当然，您也可以使用 <code>Typora</code> 进行写作。但是 <code>Typora</code> 是一个收费软件。</p><p>这二者在使用的体验上差距不大。</p><p>关于 <code>Markdown</code> 语法，请阅读 <a href="https://markdown.com.cn/">官方文档</a> 。</p><p>写完文章，还需要配置 <code>Front matter</code> ，关于 <code>Front matter</code> 的配置请参考主题的官方文档。</p><p>之后，我们使用以下命令生成文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br></pre></td></tr></table></figure><h3 id="GitHub-更新"><a href="#GitHub-更新" class="headerlink" title="GitHub 更新"></a><code>GitHub</code> 更新</h3><p>在本地写完文章或者更新完站点的配置之后，我们需要将它们推送到 <code>GitHub</code> 的仓库上。</p><p>如果您是按照上面介绍的方式克隆仓库，那么您只需要在终端输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;your-commit&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><code>your-commit</code> 可以是您这次更改的内容。这里的单引号 <code>&#39;&#39;</code> 可以使用双引号 <code>&quot;&quot;</code> 代替，但不能省略。</p><p><code>git add .</code> 是将有更改的文件放入缓冲区，然后使用 <code>commit</code> 给它们 “贴上标签” ，最后 <code>push</code> 到仓库上。</p><p>之后，<code>Vercel</code> 会自动检测仓库变化，并自动部署。</p><p>因为主题也是通过克隆的方式下载到本地的，所以主题文件夹中也会有一个 <code>.git</code> 的文件夹。</p><p>而这个文件夹的存在会导致以上指令报错，解决方法就是将该文件夹删除，该操作没有风险。</p><p><strong>注意：</strong> 写完文章之后，一定要 <code>hugo</code> 一下，然后使用 <code>hugo server</code> 预览，没有问题之后再 <code>push</code> 。</p><p>至此，您就已经成功搭建了一个静态博客。现在，享受写作吧！</p><p>如果有什么问题，请在评论区提出，我会及时回复。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
            <tag> 博客 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（六）</title>
      <link href="/2022/11/06/cpp-6/"/>
      <url>/2022/11/06/cpp-6/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（六）"><a href="#C-教程（六）" class="headerlink" title="C++ 教程（六）"></a>C++ 教程（六）</h1><blockquote><p>写在前面：因为本人能力有限，并且对于 <code>C++</code> 并没有掌握得很全面，所以前面的教程有许多疏漏，为了填补前面没有介绍到的东西，特此写一篇博文来补充。</p><p>所以，这篇文章不会有很多新东西，但是依然值得一看。</p></blockquote><h2 id="上一节的练习"><a href="#上一节的练习" class="headerlink" title="上一节的练习"></a>上一节的练习</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><p>对于给定的 <code>n</code> ，输出斐波那契数列的 <code>1~n</code> 项。</p><h4 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h4><p>关于斐波那契数列的写法有很多，由于上一篇文章介绍的是数组，所以这边用数组来实现。</p><p>我们令这个数列为 <code>a</code> ，下标为 <code>i</code> 。</p><p>显而易见，当 <code>i &lt; 3</code> 时，a<sub>i</sub> = 1。当 <code>i &gt;= 3</code> 时，a<sub>i</sub> = a<sub>i-1</sub> + a<sub>i-2</sub> 。</p><p>由此，我们可以解决这一问题。实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">200</span>;    <span class="comment">//随便定一个数组大小</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> a[ArSize] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">3</span>)</span><br><span class="line">            a[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)    <span class="comment">// 也可以在上一个循环中直接输出</span></span><br><span class="line">        std::cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复习函数传递实参"><a href="#复习函数传递实参" class="headerlink" title="复习函数传递实参"></a>复习函数传递实参</h3><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h4><p>写一个函数，包含两个参数，第一个参数是要进行操作的数字，第二个参数是一个整数。</p><p>函数的功能是让第一个参数加上第二个参数，并且返回值为 <code>void</code> 。</p><h4 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h4><p>这题就是简单的复习函数的引用参数，也就是传递实参。</p><p>由于比较简单，这边只提供函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x += add;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（好像有点水）</p><h2 id="运算符专题"><a href="#运算符专题" class="headerlink" title="运算符专题"></a>运算符专题</h2><p><code>C++</code> 中有各式各样的运算符。</p><p>对于它们的分类，我们可以通过它们的操作数个数分为 单目运算符、双目运算符和三目运算符。</p><p>什么是操作数个数呢？</p><p>举个例子，对于加号 <code>+</code> ，我们这么使用它：<code>a + b</code> ，那么，它的操作数个数就是 2 。我们将它归类于 双目运算符。</p><p>单目运算符在位运算符中比较常见，由于是比较基础的教程，这边暂不探讨位运算符（其实我也不会）。</p><p>我们见过的单目运算符有布尔值中的取反符号 <code>!</code> ，还有自增自减 <code>++</code> 和 <code>--</code> ，它们就是单目运算符。</p><p>那么三目运算符有什么呢？</p><p>其实，<code>C++</code> 中的三目运算符只有一个，那就是 <code>? :</code> 运算符。</p><p>这个运算符有什么作用呢？</p><p>其实它就是比较简短的 <code>if-else</code> 语句。我们往往使用它来简化代码。</p><p>它的使用格式如下：<code>condition ? true : false</code> 。</p><p>当 <code>condition</code> 为真时，它执行或返回 <code>true</code> 部分，如果为假，那就执行或返回 <code>false</code> 部分。</p><p>比如，我输入两个数字，要求程序输出较大的那一个数字。</p><p>如果用 <code>if-else</code> 语句，那么就要写比较多的代码。如果是用 <code>? :</code> 的话，就会大大简化代码。</p><p>示例程序 6.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please input a and b:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The bigger number is: &quot;</span> &lt;&lt; (a &gt; b ? a : b)</span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这个运算符可以进行嵌套。如果要求输出三个数字中最大的数字，那么可以采用如下写法：</p><p>示例程序 6.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please input a, b and c:&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;The biggest number is: &quot;</span></span><br><span class="line">              &lt;&lt; (a &gt; (b &gt; c ? b : c) ? a : (b &gt; c ? b : c))</span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，<code>true</code> 和 <code>false</code> 的部分也可以是语句。多条语句之间使用逗号 <code>,</code> 隔开。</p><p>同样是求三个数字中的最大值。我们可以这么写：</p><p>示例程序 6.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input a, b and c:&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The biggest number is: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    (a &gt; (temp = (b &gt; c ? b : c)) ? cout &lt;&lt; a,</span><br><span class="line">     cout &lt;&lt; endl                 : cout &lt;&lt; temp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用三目运算符的目的是简化代码。</p><p>如果像上面这样写，不仅达不到简化的目的，反而会让程序变得难懂，降低了程序的可读性。</p><p>所以，对于三目运算符的使用，还需要视情况而定。</p><p>如果要给一个变量加上一个数字，比如让 <code>a</code> 加上 <code>n</code> ，那么我们可以这么写：<code>a = a + n;</code> 。</p><p><code>C++</code> 中还提供了简写的方式，即 <code>a += n;</code> ，这类运算符叫做复合赋值操作符。</p><p>常见的复合赋值操作符有以下这些：</p><table><thead><tr><th align="center">运算符</th><th align="center">使用</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">+=</td><td align="center">a += n</td><td align="center">将 <code>a + n</code> 的值赋值给 <code>a</code> ，当 <code>n == 1</code> 时，等效于 <code>a++</code> 或 <code>++a</code> 。</td></tr><tr><td align="center">-=</td><td align="center">a -= n</td><td align="center">将 <code>a - n</code> 的值赋值给 <code>a</code> ，当 <code>n == 1</code> 时，等效于 <code>a--</code> 或 <code>--a</code> 。</td></tr><tr><td align="center">*=</td><td align="center">a *= n</td><td align="center">将 <code>a * n</code> 的值赋值给 <code>a</code> 。</td></tr><tr><td align="center">/=</td><td align="center">a /= n</td><td align="center">将 <code>a / n</code> 的值赋值给 <code>a</code> 。</td></tr><tr><td align="center">%=</td><td align="center">a %= n</td><td align="center">将 <code>a % n</code> 的值赋值给 <code>a</code> 。</td></tr></tbody></table><p>关于自增和自减运算符 <code>++</code> 和 <code>--</code> ，还有一些细节的内容。</p><p>当它们分别放在变量的前后时，其意义是不一样的。</p><p>下面，我们用一个示例程序看看其中的差别。</p><p>示例程序 6.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Now, a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    a++;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After a++, a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    ++a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After ++a, a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Using a++ directly, a++ = &quot;</span> &lt;&lt; a++ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Now a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Using ++a directly, ++a = &quot;</span> &lt;&lt; ++a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出结果如下：</p><p><img src="https://ci.cncn3.cn/79199e0030239969c567aa9864723d76.png" alt="79199e0030239969c567aa9864723d76.png"></p><p>在语句外使用 <code>a++</code> 和 <code>++a</code> 的效果是一样的，但是直接输出 <code>a++</code> 和 <code>++a</code> 的结果却是不一样的。</p><p>这是因为 <code>a++</code> 是 “先用再变” ，而 <code>++a</code> 是 “先变再用” 。</p><p>所以直接输出 <code>a++</code> 时，其实是先输出 <code>a</code> ，然后再改变 <code>a</code> 的值。</p><p>所以在语句中使用时要特别注意这一特性。</p><p>运算符还有一个很重要的内容，那就是运算的优先级。</p><p>就像数学中的四则运算，先乘除后加减。<code>C++</code> 也有它独特的运算优先级。</p><p>关于这部分内容，参考这篇文章： <a href="https://blog.csdn.net/zb_915574747/article/details/99704639">传送门</a> 。</p><p>如果记不住这么多的优先级，可以使用小括号 <code>()</code> 来将你想要先执行的运算括起来。</p><p>程序从内层小括号往外计算。注意，<code>C++</code> 中的中括号 <code>[]</code> 和大括号 <code>&#123;&#125;</code> 与数学中的含义是不一样的。</p><p>它们不能起到改变运算优先级的作用。关于运算符目前就补充这么多了。</p><h2 id="关于-enum"><a href="#关于-enum" class="headerlink" title="关于 enum"></a>关于 <code>enum</code></h2><p>之前只介绍了 <code>enum</code> 的显式用法，现在补充以下它的隐式用法。</p><p>示例程序 6.5</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Zero, One, Two &#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Zero = &quot;</span> &lt;&lt; Zero &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;One = &quot;</span> &lt;&lt; One &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Two = &quot;</span> &lt;&lt; Two &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/73dfd6ecc1faefb998efa556d55f5e8e.png" alt="73dfd6ecc1faefb998efa556d55f5e8e.png"></p><p>可以看到，<code>enum</code> 的首个元素默认为 <code>0</code> ，那么它之后的元素的默认值遵循什么规则呢？</p><p>这里我们再看一个例子：</p><p>示例程序 6.6</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; First = <span class="number">10</span>, Second, Third &#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;First = &quot;</span> &lt;&lt; First &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Second = &quot;</span> &lt;&lt; Second &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Third = &quot;</span> &lt;&lt; Third &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Fir = <span class="number">10</span>, Sec = <span class="number">5</span>, Thr &#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Fir = &quot;</span> &lt;&lt; Fir &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Sec = &quot;</span> &lt;&lt; Sec &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Thr = &quot;</span> &lt;&lt; Thr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/d79fa2b263dd5b55a21078610ae2048c.png" alt="d79fa2b263dd5b55a21078610ae2048c.png"></p><p>由此可见，对于 <code>enum</code> 中的元素，其默认值为前一个元素的值加 <code>1</code> 。</p><h2 id="关于字符"><a href="#关于字符" class="headerlink" title="关于字符"></a>关于字符</h2><p>在前面的教程中，我们或多或少接触到了字符这一类型。</p><p>这里，我们介绍以下转义字符。</p><table><thead><tr><th align="center">符号</th><th align="center">转义序列</th></tr></thead><tbody><tr><td align="center">换行符</td><td align="center"><code>\n</code></td></tr><tr><td align="center">反斜杠</td><td align="center"><code>\\</code></td></tr><tr><td align="center">水平制表符</td><td align="center"><code>\t</code></td></tr><tr><td align="center">问号</td><td align="center"><code>?</code> 或 <code>\?</code></td></tr><tr><td align="center">垂直制表符</td><td align="center"><code>\v</code></td></tr><tr><td align="center">单引号</td><td align="center"><code>\&#39;</code></td></tr><tr><td align="center">退格符</td><td align="center"><code>\b</code></td></tr><tr><td align="center">双引号</td><td align="center"><code>\&quot;</code></td></tr><tr><td align="center">回车符</td><td align="center"><code>\r</code></td></tr><tr><td align="center">null 字符</td><td align="center"><code>\0</code></td></tr><tr><td align="center">换页符</td><td align="center"><code>\f</code></td></tr><tr><td align="center">八进制</td><td align="center"><code>\ooo</code></td></tr><tr><td align="center">警报（响铃）</td><td align="center"><code>\a</code></td></tr><tr><td align="center">十六进制</td><td align="center"><code>\xhhh</code></td></tr></tbody></table><p>来源：<a href="https://learn.microsoft.com/zh-cn/cpp/cpp/string-and-character-literals-cpp?view=msvc-170">Microsoft learn</a> 。</p><p>有了转义字符之后，我们输出回车就可以不使用 <code>std::endl</code> ，而用 <code>\n</code> 代替。</p><p><strong>注意</strong>，虽然转义字符由两个单独的字符组成，但它仍然是一个字符，也可以用 <code>&#39;\n&#39;</code> 这样的形式表达。</p><h2 id="C-风格的-I-O"><a href="#C-风格的-I-O" class="headerlink" title="C- 风格的 I/O"></a>C- 风格的 <code>I/O</code></h2><p>C- 风格的输入输出主要依赖于两个函数：<code>printf()</code> 和 <code>scanf()</code> 。</p><p>下面看一个示例程序。</p><p>示例程序 6.7</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> <span class="comment">//using printf() and scanf()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::printf;</span><br><span class="line">    <span class="keyword">using</span> std::scanf;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input n:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n = %d\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://ci.cncn3.cn/aa1d39fb9313c46228769d7281d83b87.png" alt="aa1d39fb9313c46228769d7281d83b87.png"></p><p>程序中出现的 <code>%d</code> 是什么东西呢？</p><p>这是C语言中的转换说明，其中 <code>%d</code> 就是 <code>int</code> 对应的转换说明。</p><p>常用的转换说明详见 <a href="https://www.cnblogs.com/yyy6/p/8994656.html">这篇文章</a> 。</p><p><code>printf()</code> 和 <code>scanf()</code> 函数可以接受多个参数，您要输出或者输入多少个数据，就可以有多少个参数。</p><p>注意，<code>scanf()</code> 接受的是一个地址，所以要记得加上 <code>&amp;</code> 。</p><p>如果是读取字符串，那就不需要加上 <code>&amp;</code> 。</p><p>示例程序 6.8</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span> <span class="comment">//using printf() and scanf()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::printf;</span><br><span class="line">    <span class="keyword">using</span> std::scanf;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> StrLen = <span class="number">80</span>;</span><br><span class="line">    <span class="type">char</span> str[StrLen];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input a string:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The string is: %s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的文章，可以看到 C- 风格的输出在格式化方面会相对简单，而 <code>C++</code> 则需要记忆许多新的函数等。</p><p>当然，<code>cout</code> 的输出比 <code>printf()</code> 输出要更简单，不用记忆那么多的转换说明。所以这二者可以视情况使用。</p><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C风格 </tag>
            
            <tag> enum </tag>
            
            <tag> 字符 </tag>
            
            <tag> 补充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（五）</title>
      <link href="/2022/10/29/cpp-5/"/>
      <url>/2022/10/29/cpp-5/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（五）"><a href="#C-教程（五）" class="headerlink" title="C++ 教程（五）"></a>C++ 教程（五）</h1><h2 id="上一节的练习题"><a href="#上一节的练习题" class="headerlink" title="上一节的练习题"></a>上一节的练习题</h2><p>上一节中，第 1 题相对简单，那么第 2 题要怎么做呢？</p><p>题目如下：</p><p>对于给定的一个大写字母，输出如下图的金字塔。</p><p><img src="https://ci.cncn3.cn/89df47d3f13f5f36647ea702b4993521.png" alt="89df47d3f13f5f36647ea702b4993521.png"></p><p>先分析一下这个金字塔由什么构成。</p><ol><li>行首的空格。</li><li>正向输出字母。</li><li>反向输出字母。</li><li>换行。</li></ol><p>我们首先使用一个大的循环，来输出换行符。可以看到，行数等于字母在字母表中的位置<code>pos</code> 。所以输出的换行符个数为 <code>line = pos - 1</code> 。</p><p>然后观察输出空格的个数与行数之间的关系。</p><p>空格的个数为 <code>line - i + 1</code> ，其中 <code>i</code> 为行数。</p><p>接着我们正向输出字母，在反向输出字母，就解决了。</p><p>所以我们要用到 4 个循环，其中 3 个循环嵌套在 1 个循环中。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    cin &gt;&gt; ch;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> line = ch - <span class="string">&#x27;A&#x27;</span>;    <span class="comment">//获得行数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= line;i++)    <span class="comment">//输出换行符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= line - i + <span class="number">1</span>; j++)    <span class="comment">//输出空格</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++)    <span class="comment">//正向输出字母</span></span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)(j + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)    <span class="comment">//反向输出字母</span></span><br><span class="line">            cout &lt;&lt; (<span class="type">char</span>)(j + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种用于存储有限元素的集合。</p><p>在 <code>C++</code> 中，一种数组只能存储同一类型的数据。数组的声明方式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>其中，<code>arr</code> 是数组名，中括号 <code>[]</code> 中的常量指定该数组包含多少元素。前面的 <code>int</code> 指明了该数组的类型为 <code>int</code> 。</p><p>数组除了声明之外，数组的下标也是至关重要的。</p><p>元素存储在数组中时，每个元素都对应一个下标，我们可以通过下标访问某个元素。</p><p>数组的下标从 <code>0</code> 开始，对于 <code>int arr[100]</code> 这个数组来说，它的下标是 <code>0~99</code> ，即不存在 <code>100</code> 下标。</p><p>所以，数组的最后一个元素的下标是定义的元素个数减 1 。</p><p>对于数组的初始化，我们可以使用赋值的方式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[ArSize];</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">30</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组使用 <code>a[pos]</code> （<code>pos</code> 为数组下标） 的形式表达数组中的第 <code>pos</code> 个元素。</p><p>这个时候，可以将 <code>a[pos]</code> 看作一个 <code>int</code> 类型的变量。并像普通的 <code>int</code> 类型数据一样进行操作。</p><p>比如进行运算或者赋值等。</p><p>回到初始化，如果像上面那样一个一个赋值，那效率会十分低下。</p><p>我们可以使用大括号 <code>&#123;&#125;</code> 在数组声明时进行初始化赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[ArSize] = &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a[0] = 20;</span></span><br><span class="line">    <span class="comment">// a[1] = 30;</span></span><br><span class="line">    <span class="comment">// a[2] = 40;</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，20、30、40 分别对应下标 0、1、2 。每两个值之间用逗号 <code>,</code> 隔开。</p><p>之后的元素都被自动初始化为 0 。</p><p>如果要将数组全部初始化为 0 。那么可以写成 <code>int a[ArSize] = &#123;0&#125;;</code> 的形式。</p><p>当然，您也可以使用循环进行赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[ArSize];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize;i++)</span><br><span class="line">        a[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize;i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，您也可以将数组初始化成别的值。</p><p>这里提供一个函数 <code>memset()</code> ，它是定义在 <code>&lt;cstring&gt;</code> 中的一个函数。</p><p>我们也可以使用这个函数来将数组清零。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ArSize = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[ArSize];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ArSize;i++)</span><br><span class="line">        std::cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么要对数组进行初始化？</p><p>无论是什么数据类型，我们都应尽量将其初始化。</p><p>对于数组，在不初始化的情况下，访问任意元素的结果是不确定的。</p><p>数组不会自动初始化为 0 ，这一点读者可以自己试验一下。</p><p>在能初始化的情况下，我们因尽量将每个变量进行初始化，防止不必要的意外发生。</p></blockquote><h2 id="再谈字符串"><a href="#再谈字符串" class="headerlink" title="再谈字符串"></a>再谈字符串</h2><p>数组是一个相同元素的集合，如果一个数组的元素是字符的话，那么它就是一个字符串。</p><p>示例程序 5.1 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> StrSize = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> str[StrSize] = <span class="string">&quot;This is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，字符数组可以直接用 <code>cout</code> 进行输出，并且可以直接用字符串进行赋值初始化。</p><p>当然，您也可以采用上述的初始化方法，但那样会非常麻烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[StrSize] = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span> ......&#125;;</span><br></pre></td></tr></table></figure><p>这就是之前提到的 C 风格 的字符串。关于 C- 风格字符串的相关操作，我们可以使用 <code>&lt;cstring&gt;</code> 中的函数进行。</p><p>对于 <code>C++</code> 而言，我们应尽量使用 <code>string</code> 而不是 C- 风格的字符串。</p><p>但是，<code>string</code> 的实现还是有依靠 <code>&lt;cstring&gt;</code> 中的函数实现的。</p><p>感兴趣的读者可以自行研究 <code>&lt;cstring&gt;</code> 头文件中的函数。</p><p>C- 风格的字符串和 <code>string</code> 类都可以通过中括号 <code>[]</code>  访问其中元素。</p><h2 id="地址与指针初探"><a href="#地址与指针初探" class="headerlink" title="地址与指针初探"></a>地址与指针初探</h2><p>地址和指针是 <code>C++</code> 中比较难懂的部分。能够熟练地使用指针，可以让程序更易于管理。</p><p>当然，如果使用不当，也会引发十分严重的后果。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>地址是什么？</p><p>地址是变量存储在内存中的位置。我们可以通过 <code>&amp;</code> 符号查看某一变量的地址。</p><p>示例程序 5.2 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;a: &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;b: &quot;</span> &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&amp;c: &quot;</span> &lt;&lt; &amp;c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://ci.cncn3.cn/d8578dae1cd8fd70477a1905833e687d.png" alt="d8578dae1cd8fd70477a1905833e687d.png"></p><p>因为电脑不同，所以输出的结果会有差别。</p><p>注意看这些地址，它们是以十六进制显示的。</p><p>仔细观察 <code>a</code> 和 <code>b</code> 的地址的差为 4，<code>b</code> 与 <code>c</code> 的地址的差也为 4 。</p><p>这里的 4 是有意义的，之前我们就介绍过，<code>int</code> 所占的字节数为 4 。</p><p>我们可以看出变量在内存中存储的大致样子。</p><p>现在考虑一个问题，如果我们需要写一个函数来实现两个变量的交换，那么要怎么实现？</p><p>也许您会这么想：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySwap1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看起来是可行的，我们用下列程序测试一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySwap1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;In MySwap1():&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">MySwap1</span>(a, b);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;In main():&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><p><img src="https://ci.cncn3.cn/812f7dac06348a24459e1aecaf4f0ddb.png" alt="812f7dac06348a24459e1aecaf4f0ddb.png"></p><p>可以看到，两个变量的值并没有互换。这是为什么呢？</p><p>这里我们就需要补充一下 形式参数 和 实际参数 的区别了。</p><p>所谓 形式参数 （简称 形参）只是一个形式上的参数，就好比只传递了一层外壳，而不是整个整体。</p><p>而 实际参数（简称 实参）是将整个变量传入函数。是将整个整体传入函数。</p><p>而 <code>MySwap1()</code> 函数中传递的就是两个形参，所以只有在函数中，<code>x</code> 和 <code>y</code> 实现了互换。</p><p>那么要怎么实现交换两个变量的操作呢？</p><p>这里我们传值就不能传一个简单的变量了，就需要传递地址。</p><p>传递地址是 C- 的说法，在 <code>C++</code> 中，我们把它称为 引用。</p><p>具体的实现如下：</p><p>示例程序 5.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MySwap1</span><span class="params">(<span class="type">int</span>&amp; x, <span class="type">int</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;In MySwap1():&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">MySwap1</span>(a, b);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;In main():&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里传递的参数为 实参，达到了交换两个变量的目的。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>在了解完地址之后，我们来介绍指针。</p><p>指针是一个很形象的称呼，它用来指向一个地址。指针的声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;</span><br></pre></td></tr></table></figure><p>这样子我们就声明了一个指针。</p><p>指针应当直接初始化，让它指向一个变量。如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *ptr = &amp;a;</span><br></pre></td></tr></table></figure><p>此时，<code>*ptr</code> 和 <code>a</code> 是一样的。因此我们可以直接输出 <code>*ptr</code> 。</p><p>示例程序 5.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *ptr = &amp;a;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *ptr + <span class="number">100</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么指针有什么用呢？</p><p>之后我们会介绍使用指针来实现动态数组的作用。由于这篇只是开个头，所以暂不探讨。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li>对于给定的 <code>n</code> ，输出斐波那契数列的 <code>1~n</code> 项。<a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145">什么是斐波那契数列？</a></li><li>写一个函数，包含两个参数，第一个参数是要进行操作的数字，第二个参数是一个整数，函数的功能是让第一个参数加上第二个参数，并且返回值为 <code>void</code> 。</li><li>定义不同类型的指针，复习指针的用法。</li></ol><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 地址 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（四）</title>
      <link href="/2022/10/22/cpp-4/"/>
      <url>/2022/10/22/cpp-4/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（四）"><a href="#C-教程（四）" class="headerlink" title="C++ 教程（四）"></a>C++ 教程（四）</h1><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p><code>C++</code> 中，循环结构有三种写法，我们要接触到 3 个新的关键字，分别是 <code>while</code> 、<code>do</code> 和 <code>for</code> 。</p><p>接下来，我将逐一介绍它们。</p><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h3><p><code>while</code> 循环的基本结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="comment">/* condition */</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>condition</code> 部分是一个条件，就像 <code>if</code> 后面的语句一样，是一个布尔值或者条件表达式。</p><p><code>while</code> 循环的执行顺序是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">判断条件-&gt;如果条件符合-&gt;执行块中的语句-&gt;判断条件-&gt;符合就重复第3步，不符合就跳出</span><br><span class="line">判断条件-&gt;如果条件不符合-&gt;执行 while 之后的语句</span><br></pre></td></tr></table></figure><p>如果要输出从 1 到 n 之间所有的整数，用 <code>while</code> 循环可以这么写：</p><p>示例程序 4.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input n: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序中出现了 <code>i++</code> 的写法，这条语句的意思是将 <code>i</code> 自增 1。其中 <code>++</code> 属于一种运算符。</p><p>如果要自减的话，就使用 <code>--</code> 运算符。关于运算符还有许多细节，将来我会写一篇专题来介绍。</p><p>如果要让程序进入死循环，只需要让条件恒为真，所以您可以这么写 <code>while(1)</code> 。</p><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do while 语句"></a>do while 语句</h3><p><code>do while</code> 的使用率比较少，它的基本结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="comment">/* condition */</span>);</span><br></pre></td></tr></table></figure><p><code>while</code> 是在循环的入口判断条件，而 <code>do while</code> 是在循环的出口判断条件。</p><p>示例程序 4.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，i 为 1，不符合 <code>i &lt; 1</code> 的条件，但是因为是在出口处判断条件，所以仍然会输出 i 的值。</p><blockquote><p><strong>注意：</strong> <code>do while</code> 结构中 <code>while</code> 的末尾有一个分号，不要忘记这个细节。</p></blockquote><h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><p><code>for</code> 语句的基本结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (type i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (1；2；3)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    4</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><p><code>for</code> 循环的执行顺序是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 3</span><br></pre></td></tr></table></figure><p><code>1</code> 部分是初始化一个变量，在 <code>C语言</code> 中，不能在 <code>1</code> 的位置声明新的变量，但 <code>C++</code> 可以。</p><p>在一个循环中 <code>1</code> 部分只执行一次。</p><p><code>2</code> 部分是循环的条件，每次执行前都要判断一次条件。</p><p><code>3</code> 部分是每次循环的语句块结束之后进行的操作。执行完这部分之后就判断条件。</p><p><code>4</code> 部分是要循环的步骤。</p><p>如果要输出从 <code>1</code> 到 <code>n</code> 之间所有的整数，用 <code>for</code> 循环可以这么写：</p><p>示例程序 4.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input n: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code> 循环也可以省略 <code>1</code> 、<code>2</code> 、<code>3</code>  中的内容。如果写成 <code>for( ; ; )</code> 的形式，那就是一个死循环了。</p><h3 id="循环的其它内容"><a href="#循环的其它内容" class="headerlink" title="循环的其它内容"></a>循环的其它内容</h3><h4 id="continue-和-break"><a href="#continue-和-break" class="headerlink" title="continue 和 break"></a>continue 和 break</h4><p><code>continue</code> 的用法是直接跳过这次循环，进行下一次循环的判断和执行。</p><p><code>break</code> 的作用是直接跳出该循环。</p><p>示例程序 4.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>可以看到，程序没有输出 <code>5</code> ，因为当 <code>i==5</code> 时使用了 <code>continue</code> 导致此次循环被跳过。</p><p>程序只输出到 <code>7</code> 是因为当 <code>i==8</code> 时使用了 <code>break</code> ，跳出了循环。</p><h4 id="三种循环结构的选用"><a href="#三种循环结构的选用" class="headerlink" title="三种循环结构的选用"></a>三种循环结构的选用</h4><p>对于 <code>while</code> 、<code>do while</code> 和 <code>for</code> 三种循环语句，恰当地选择使用可以让编程的条理更清楚。</p><p>如果是进行一个区间内的循环，那么使用 <code>for</code> 是一个不错的选择。</p><p>如果是让程序主体重复执行或者死循环，那么 <code>while</code> 和 <code>do while</code> 都要优于 <code>for</code> 。</p><p>接下来，我将用制作一个简单的计算器来复习之前学过的内容。</p><h2 id="简单的计算器"><a href="#简单的计算器" class="headerlink" title="简单的计算器"></a>简单的计算器</h2><p>因为我们还没有介绍自定义头文件的方法，所以这个简单的小项目将所有的函数放在同一个文件中。</p><p>这样子会大大增加单个文件的长度，如果使用自定义的头文件，那将使单个文件更简短。</p><p>进入正题，这个简单的计算器只需要能计算简单的四则运算。</p><p>我们首先需要一个菜单。对于菜单，我们需要两个函数。</p><p>一个函数用于重复输出一个字符，另一个函数用于输出选项。如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutChar</span><span class="params">(<span class="type">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutMenu</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutChar</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> LIMIT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LIMIT; i++)</span><br><span class="line">        std::cout &lt;&lt; ch;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> std::string space = <span class="string">&quot;   &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择需要的运算方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[1] 加法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[2] 减法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[3] 乘法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[4] 除法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[q] 退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>PutMenu()</code> 中的 <code>space</code> 的作用是让选项居中输出。让菜单更整洁。</p><p>对于选项的选择，我们需要一个 <code>choice</code> 变量，再让用户输入这个变量。</p><p>然后 5 个选项分别对应 5 个数字。然后用 <code>switch</code> 判断 <code>choice</code> 属于哪一类运算。</p><p>那么怎么定义 5 个选项所对应的数字呢？</p><p>如果只是在脑海里“记住”对应的数字，那样是非常不靠谱的。</p><p>编程的时候，代码中应尽量有意义的变量或常量名，而不是单一的数字。</p><p>这个时候我们就需要使用之前提到过的常量的定义。这里我使用的是 <code>enum</code> ，也顺便演示一下 <code>enum</code> 的一般用法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">DEVICE</span></span><br><span class="line">&#123;</span><br><span class="line">    QUIT = <span class="number">0</span>,          <span class="comment">// 退出</span></span><br><span class="line">    ADDITION = <span class="number">1</span>,      <span class="comment">// 加法</span></span><br><span class="line">    SUBSTRACTION = <span class="number">2</span>, <span class="comment">// 减法</span></span><br><span class="line">    MULT = <span class="number">3</span>,          <span class="comment">// 乘法</span></span><br><span class="line">    DIVISION = <span class="number">4</span>      <span class="comment">// 除法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了这个思路之后，我们先来考虑怎么解决退出的问题。</p><p>这里就需要介绍一个新的函数 <code>exit()</code> ，它是定义在头文件 <code>&lt;cstdio&gt;</code> 中的函数。</p><blockquote><p>头文件名称中的“前缀”：因为 <code>C++</code> 是由 C语言 发展而来的，所以仍然包括 C语言原有的库。</p><p>这些头文件为了区别原有的头文件，就在文件名的前面加上了 <code>c</code> 来显示它是 C语言 的头文件。</p><p>这些头文件中的东西也是包含在 <code>std</code> 名称空间中的。所以在使用时要记得使用 <code>std</code> 名称空间。</p></blockquote><p>这个函数接受一个整数参数，然后退出程序。 </p><p>如果成功退出则参数为 <code>0</code> 或 <code>EXIT_SUCCESS</code> ，如果失败则可以使用 <code>EXIT_FAILURE</code> 来退出。</p><p>这里我们就使用 <code>EXIT_SUCCESS</code> 来进行退出。</p><p>之后就在 <code>switch</code> 中解决运算的过程。</p><p>这里要注意当选择的运算方法为除法时，要判读第二个数字是否为 0 。</p><p>如果为 0 的话，那就要求用户重新输入第二个数字。</p><p>所以 <code>Solve()</code> 函数的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> firnum, secnum;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (choice == QUIT)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;再见！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">        std::<span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入第一个数: &quot;</span></span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; firnum;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入第二个数: &quot;</span></span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; secnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> ADDITION:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum + secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SUBSTRACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum - secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MULT:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum * secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> DIVISION:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (secnum == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;除数不能为 0, 请重新输入除数&quot;</span></span><br><span class="line">                        &lt;&lt; std::endl;</span><br><span class="line">                std::cin &gt;&gt; secnum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum / secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，程序中还有一个新的函数 <code>sleep()</code> ，这个函数是用来使程序进入等待。</p><p>它接受一个参数，以毫秒为单位，作为程序等待的时长。</p><p>在 <code>Linux</code> 系统下，它包含在头文件 <code>&lt;unistd.h&gt;</code> 中，而在 <code>Windows</code> 系统下，则包含在头文件 <code>&lt;windows.h&gt;</code>  中。</p><p>因为运算不可能只有一次，所以我们需要一个循环来让用户达到多次选择并计算的效果。</p><p>最后放出所有的源代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span>     <span class="comment">//使用 exit()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>    <span class="comment">// 如果是在 Windows 系统下，则替换成 &lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">DEVICE</span></span><br><span class="line">&#123;</span><br><span class="line">    QUIT = <span class="number">0</span>,          <span class="comment">// 退出</span></span><br><span class="line">    ADDITION = <span class="number">1</span>,      <span class="comment">// 加法</span></span><br><span class="line">    SUBSTRACTION = <span class="number">2</span>, <span class="comment">// 减法</span></span><br><span class="line">    MULT = <span class="number">3</span>,          <span class="comment">// 乘法</span></span><br><span class="line">    DIVISION = <span class="number">4</span>      <span class="comment">// 除法</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function statements</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutChar</span><span class="params">(<span class="type">char</span> ch)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutMenu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PutMenu</span>();</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutChar</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> LIMIT = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LIMIT; i++)</span><br><span class="line">        std::cout &lt;&lt; ch;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PutMenu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> std::string space = <span class="string">&quot;   &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择需要的运算方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[1] 加法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[2] 减法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[3] 乘法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[4] 除法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; space &lt;&lt; <span class="string">&quot;[q] 退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">PutChar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> firnum, secnum;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    std::cin &gt;&gt; choice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (choice == QUIT)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;再见！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">        std::<span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入第一个数: &quot;</span></span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; firnum;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入第二个数: &quot;</span></span><br><span class="line">              &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; secnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> ADDITION:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum + secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SUBSTRACTION:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum - secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MULT:</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum * secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> DIVISION:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (secnum == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;除数不能为 0, 请重新输入除数&quot;</span></span><br><span class="line">                        &lt;&lt; std::endl;</span><br><span class="line">                std::cin &gt;&gt; secnum;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            std::cout &lt;&lt; firnum &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; secnum</span><br><span class="line">                    &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; firnum / secnum</span><br><span class="line">                    &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li>在本例计算器的基础上增加计算阶乘的功能和计算乘方的功能。</li><li>对于给定的一个大写字母，输出如下图的金字塔。</li></ol><p><img src="https://ci.cncn3.cn/89df47d3f13f5f36647ea702b4993521.png" alt="89df47d3f13f5f36647ea702b4993521.png"></p><hr><p> ——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 循环结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（三）</title>
      <link href="/2022/10/15/cpp-3/"/>
      <url>/2022/10/15/cpp-3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（三）"><a href="#C-教程（三）" class="headerlink" title="C++ 教程（三）"></a>C++ 教程（三）</h1><h2 id="函数初探"><a href="#函数初探" class="headerlink" title="函数初探"></a>函数初探</h2><p>函数是 <code>C++</code> 中的重要组成部分，在编程的过程中，为了实现各种各样的目标，我们难免要自己创建函数来达到目标。</p><p>可以说，编程的乐趣正是在于编写函数并且实现编程的目标。</p><p><code>C++</code> 本身就包含了许多函数，它们位于不同的头文件中。</p><p>每个函数（一般不包括 <code>main</code> 函数）的地位都是平等的。每个函数都可以调用别的函数包括自己（递归）。</p><p>我们用熟悉的 <code>main</code> 函数举例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的函数包括以下几个元素：</p><ol><li><p>函数名</p><p>函数名的定义规则和变量的定义规则是一样的，都不能将数字放在函数名的首位。同时也要避免没有意义的函数名。<code>main</code> 就是这个函数的函数名。</p></li><li><p>参数</p><p>参数是一个函数接受的数据。虽然名为参数，但并不仅限于数字，它可以是字符、字符串或者其它类型。函数可以有多个参数，也可以没有参数。对于这个 <code>main</code> 函数来说，它没有参数。参数是位于小括号 <code>()</code> 中的内容，这里是 <code>void</code> 即空——没有参数，这个 <code>void</code> 可以省略。对于多个参数中间用逗号 <code>,</code> 隔开，之后的例子会演示这种用法。</p></li><li><p>实现</p><p>用大括号 <code>&#123;&#125;</code> 扩起来的部分就是函数的实现。无论一个函数有多少语句，它们都要包含在大括号内，这样才算函数的内容。函数内部也可以创建变量，并且这些变量不能为外部所用。</p></li><li><p>返回值</p><p>对于一个函数，它的返回值类型是位于函数名前面的类型。对于这个 <code>main</code> 函数，它的返回值类型就是 <code>int</code> 。一个函数返回值用 <code>return</code> 语句进行。当函数执行到 <code>return</code> 语句之后，就会跳出函数，执行其它的操作。返回值要与返回值类型对应。与参数一样，返回值的类型可以是 <code>void</code> ，这时候，您可以省略 <code>return</code> 语句，也可以写成 <code>return;</code> 的形式将函数终止。</p></li></ol><p>接下来，我们来看看示例程序 3.1</p><p>这个程序包含一个获取个人信息的函数，以及计算 <code>BMI指数</code> 的函数（怎么又是 <code>BMI</code>）。</p><p>示例程序 3.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明，就像声明变量一样</span></span><br><span class="line"><span class="function">std::string <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">BMI</span><span class="params">(std::string Name)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">GetName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please enter your name:&quot;</span>;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">BMI</span><span class="params">(std::string Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> height, weight;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello &quot;</span> &lt;&lt; Name</span><br><span class="line">         &lt;&lt; <span class="string">&quot;,please enter your height: &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; height;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then enter your weight: &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; weight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double bmi = weight / (height * height);</span></span><br><span class="line">    <span class="comment">// return bmi;</span></span><br><span class="line">    <span class="comment">// That&#x27;s OK</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight / (height * height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string name = <span class="built_in">GetName</span>();</span><br><span class="line">    <span class="type">double</span> bmi = <span class="built_in">BMI</span>(name);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;OK &quot;</span> &lt;&lt; name</span><br><span class="line">              &lt;&lt; <span class="string">&quot;, your BMI is: &quot;</span> &lt;&lt; bmi &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return;</span></span><br><span class="line">    <span class="comment">// it&#x27;s OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编程的过程中，我们应尽可能地使用函数，而不是将所有代码放在 <code>main()</code> 中。</p><p>这样做可以让编程模块化，方便将来维护。</p><p>程序运行的结果如下：</p><p><img src="https://ci.cncn3.cn/9c410cc7d552643b80f8ca7825d38a1b.png" alt="9c410cc7d552643b80f8ca7825d38a1b.png"></p><p>（图片仅供参考，请以实物为准）</p><p>在示例程序 3.1 中，我编写了三个函数，它们实现各自的目标。</p><p><code>GetName()</code> 用于获取用户名字，<code>BMI()</code> 用于计算用户的 <code>BMI</code> 指数。<code>Solve()</code> 用于实现编程的目标。</p><p>可以看出，程序从 <code>main()</code> 开始执行，然后转到 <code>Solve()</code> 函数中，再逐句执行。</p><p>所以函数的执行并不复杂，只是执行到函数时就进入函数。</p><p>对于返回值的作用，<code>Solve()</code> 函数中演示得很清楚了。返回值的作用可以简单理解为将一个函数看作一个数据，这个数据可以用于赋值等操作。</p><p>例如第 51 行，就是先执行 <code>GetName()</code> 的内容，再将获得的用户名字返回，然后赋值给 <code>Solve()</code> 中的 <code>name</code> 。</p><p>函数可以不进行声明，即您可以省略示例程序 3.1 中的 5 至 7 行。如果这么做，您将需要考虑定义函数的次序。</p><p>如果您省略声明，那么示例程序 3.1 就需要改写成如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">GetName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please enter your name:&quot;</span>;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">BMI</span><span class="params">(std::string Name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> height, weight;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello &quot;</span> &lt;&lt; Name</span><br><span class="line">         &lt;&lt; <span class="string">&quot;,please enter your height: &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; height;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Then enter your weight: &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; weight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double bmi = weight / (height * height);</span></span><br><span class="line">    <span class="comment">// return bmi;</span></span><br><span class="line">    <span class="comment">// That&#x27;s OK</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> weight / (height * height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string name = <span class="built_in">GetName</span>();</span><br><span class="line">    <span class="type">double</span> bmi = <span class="built_in">BMI</span>(name);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;OK &quot;</span> &lt;&lt; name</span><br><span class="line">              &lt;&lt; <span class="string">&quot;, your BMI is: &quot;</span> &lt;&lt; bmi &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return;</span></span><br><span class="line">    <span class="comment">// it&#x27;s OK</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您将 <code>Solve()</code> 函数的定义放到其它两个函数之前，而 <code>Solve()</code> 函数中又恰巧有使用到 <code>BMI()</code> 和 <code>GetName()</code> 函数。</p><p>那么对于 <code>Solve()</code> 来说，另外两个函数是未定义的。这样子编译器将会报错。</p><p>如果您使用声明，则只需要将声明置于程序前方。即所有函数之前就不会报错。</p><blockquote><p><strong>注意：</strong> 在制作大的项目时，应该尽可能地使用声明。如果只是一些简短的代码则不需要考虑是否需要函数声明。</p><p>我个人建议是尽量使用声明，这样可以让程序更加容易读懂。让他人以及自己知道这个程序有哪些函数，便于后期维护。</p></blockquote><p>关于函数，还有许多用法，我将在之后更深入的讲解。</p><h2 id="C-的三大结构"><a href="#C-的三大结构" class="headerlink" title="C++ 的三大结构"></a>C++ 的三大结构</h2><p><code>C++</code> 的三大结构分别是 顺序结构 、分支结构（选择结构）、循环结构。</p><p>顺序结构给程序提供执行的次序，在之前的例子中已经渗透了它的用法。</p><p>分支结构给程序提供决策的能力，让程序得以处理不同的情况。</p><p>循环结构让程序执行重复的工作，正是这一点，让信息技术成为提高我们工作效率的有力工具。</p><p>关于这三大结构，我先分别介绍它们的内容。</p><p>然后通过制作一个简单的计算器的例子来复习三大结构和函数的用法，让读者初步体会制作小项目的感觉。</p><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>我们在编程的时候，每一条语句都是讲给编译器的话。编译器听到之后作出反应，生成可执行程序。</p><p>正如和人类对话一般，说话要有先后次序，否则交流就会受到阻碍。</p><p>编程的时候，编译器从文件的第一行读到最后一行，如果中间出现了前面完全没有出现过的东西，就会报错。</p><p>这里完全没有出现过意思是没有定义或者声明过。例如，对于变量 <code>a</code> 的赋值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">1</span>;    <span class="comment">//it&#x27;s ok</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> a;    <span class="comment">//it can&#x27;t work</span></span><br></pre></td></tr></table></figure><p>您不能将声明和赋值的操作顺序互换。包括上文所说的函数的声明，也是顺序结构的体现。</p><p>顺序结构是最基本的结构，是编程的基础。</p><h3 id="分支结构（选择结构）"><a href="#分支结构（选择结构）" class="headerlink" title="分支结构（选择结构）"></a>分支结构（选择结构）</h3><p>在介绍分支结构和循环结构之前，我有必要补充一下布尔值的知识。</p><h4 id="布尔值简介"><a href="#布尔值简介" class="headerlink" title="布尔值简介"></a>布尔值简介</h4><p>布尔值 (<code>bool</code>) 是一种 <code>C++</code> 的数据类型。 <code>C语言</code> 中并没有这一类型。</p><p>对于 <code>C语言</code> ，如果需要使用 <code>bool</code> 这一数据类型，需要包含头文件 <code>stdbool.h</code> 。</p><p>布尔值只占 2 字节，它只有 <code>true</code> 和 <code>false</code> 两个值。<code>true</code> 为真，<code>false</code> 为假。</p><blockquote><p><strong>注意：</strong> 这里的真假并不涉及哲学上的真假。比如 <code>1&gt;0</code> 就是真，<code>1&lt;0</code> 即为假。</p><p>在您自己的程序中，您甚至可以自己定义真假。比如您可以让一个函数当 <code>1&gt;0</code> 时返回假。</p><p>当然，我不建议这么做。</p></blockquote><p>在 <code>C++</code> 中， <code>false</code> 可以用 <code>0</code> 代替，而 <code>true</code> 可以用所有非零的数据代替，我们一般用 <code>1</code> 代替。</p><p>如果您输出 <code>true</code> 或者 <code>false</code> ，那么控制台会对应输出 <code>1</code> 或 <code>0</code> 。</p><p>这里还要顺带提一下 <code>C++</code> 的关系运算符。所谓关系运算符就是数学上的大于小于等等。</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>&gt;</code></td><td align="center">大于</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">小于</td></tr><tr><td align="center"><code>&gt;=</code></td><td align="center">大等于</td></tr><tr><td align="center"><code>&lt;=</code></td><td align="center">小等于</td></tr><tr><td align="center"><code>==</code></td><td align="center">等于</td></tr><tr><td align="center"><code>!=</code></td><td align="center">不等于</td></tr></tbody></table><p>尤其需要注意等于的符号，是两个等号 <code>==</code> ，不要将它和赋值的一个等号 <code>=</code> 混淆。</p><p>这时候，问题来了，如果我要判断一个数字是否在一个区间内要用什么符号呢？</p><p>比如我要判断变量 <code>a</code> 是否在 <code>[10,20]</code> 这个区间内，要怎么编写条件表达式呢？</p><p>也许您会想到 <code>10 &lt;= a &lt;= 20</code> 这种数学上的写法。</p><p>不幸的是，对于人来说，这很好理解，但编译器并不接受这种写法。</p><p>这时候就需要用到布尔值中常常听到的 与、或、非了。</p><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>&amp;&amp;</code></td><td align="center">与</td></tr><tr><td align="center">`</td><td align="center"></td></tr><tr><td align="center"><code>!</code></td><td align="center">非</td></tr></tbody></table><p><code>&amp;&amp;</code> 前后连接两个表达式，如果两个都为真，则返回真。如果一个为假，则返回假。</p><p><code>||</code> 前后连接两个表达式，如果其中一个为真，则返回真。如果都为真，则返回真。都为假，则返回假。</p><p><code>!</code> 后接一个表达式，它与这个表达式对着干，如果表达式为真，则返回假。若为假，则返回真。</p><p>那么对于<code>10 &lt;= a &lt;= 20</code> 则应该写成 <code>a&lt;=20 &amp;&amp; a&gt;=10</code> 的形式。</p><p>这一点需要特别注意。初学者难免犯这种错误。</p><p>回到分支结构，分支结构有三种写法。这里将一一介绍。</p><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if / else if / else"></a>if / else if / else</h4><p>先看一个示例程序。该程序接受一个分数，并且根据其所处区间输出建议。</p><p>示例程序 3.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input your score: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Excellent!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">90</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">60</span> &amp;&amp; score &gt;= <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Try hard!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please input a right score!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The score must between 0 and 100.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;You can input a score like 90.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种的分支结构，只能有一个 <code>if</code> 和 <code>else</code> ，但可以有多个 <code>else if</code> 。有的时候也可以只有一个 <code>if</code> 。</p><p>如果这些关键字之后只有一条语句，则可以不使用大括号 <code>&#123;&#125;</code> 将其扩起。如果有多条语句，则需要使用大括号，就像函数一样。</p><p>考虑这么一个问题：如果示例中的区间有重合，那会发生什么？</p><p>示例程序 3.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input your score: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Excellent!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">50</span> &amp;&amp; score &lt; <span class="number">90</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Good!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &lt; <span class="number">60</span> &amp;&amp; score &gt;= <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Try hard!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please input a right score!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The score must between 0 and 100.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;You can input a score like 90.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，如果输入 <code>55</code> 会发生什么呢？</p><p>运行之后，发现程序只输出了 <code>Good！</code> 而不是输出 <code>Good</code> 和 <code>Try hard!</code> 两条语句。</p><p>这是因为，当程序执行到这个结构的时候，只要有一个条件符合，它就会跳出这个分支结构，直接执行之后的操作。</p><p>当条件都不符合的时候，它就会查看 <code>else</code> 之后的语句。如果没有 <code>else</code> ，就会继续执行后面的语句。</p><p>所以，在很多时候，<code>else</code> 往往会被省略。</p><blockquote><p>如果只有一条语句，一定要注意缩进，让代码看起来层次分明。</p></blockquote><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>看到这个关键字，可不要和某游戏机混淆。</p><p><code>switch</code> 的结构大致如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (tag)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> condition:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> condition:</span><br><span class="line">        ... </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的结构和 <code>if / else if /else</code> 相似。其中，<code>tag</code> 是一个整数。当然，字符 <code>char</code> 也是一个整数，因为它通过 <code>ASCII</code> 码与整数一一对应。</p><p><code>case</code> 后面跟整数值，如果相等，就执行对应操作。</p><blockquote><p><strong>注意：</strong> <code>case</code> 后面使用冒号 <code>:</code>  连接语句，冒号之后也可以使用大括号将内容扩起。如果有其它结构需要嵌套，则需要使用大括号扩起。</p></blockquote><p>那么 <code>break</code> 的作用是什么呢？</p><p>在循环中，<code>break</code> 是用来跳出循环的，那么 <code>switch</code> 中的作用是什么呢？这里，我们看一个示例程序。</p><p>示例程序 3.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; tag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">10</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">20</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">30</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Can&#x27;t work!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我输入 <code>1</code> ，我期望的是输出 <code>10</code> ，运行结果如下：</p><p><img src="https://ci.cncn3.cn/6aef5f8fb2abdfa868cf1713b54fdcf3.png" alt="6aef5f8fb2abdfa868cf1713b54fdcf3.png"></p><p>没有 <code>break</code> 的结果就是，它会一直执行下去，直到 <code>break</code> 或者结束。</p><p>所以，我们需要加上 <code>break</code> ，达到我们的目的。</p><p>最后一个 <code>default</code> 的作用和 <code>else</code> 相似。</p><p>最后，示例程序 3.3 就可以修改成如下：</p><p>示例程序 3.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; tag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">10</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">20</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        cout &lt;&lt; <span class="number">30</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Can&#x27;t work!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h4><p>许多编程语言都有 <code>goto</code> 语句，它是一种更灵活的分支结构。但是，我们不提倡使用 <code>goto</code> 语句。</p><p>因为大多数的 <code>goto</code> 都可以用循环结构代替，当然，有些情况下使用 <code>goto</code> 也不失一种明智之举。鉴于此，我只简单介绍它的用法。</p><p>示例程序 3.5</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">goto</span> GOTO_;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line"></span><br><span class="line">GOTO_:</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，就会发现，程序跳过了输入的语句，直接输出了 <code>10</code> 。</p><p><code>goto</code> 语句，就是跳转到一个标识处，然后执行标识处一下的代码。</p><p>由于它实现的原理问题，它被认为是不安全的。所以我们应使用其它的结构来代替它。</p><blockquote><p>由于篇幅的原因，循环结构和简单的计算器的制作将在下一篇博文介绍。</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>任意输入一个数字，输出它是奇数还是偶数。</p></li><li><p>使用 <code>switch</code> 语句完成对学校食堂的评分反馈。</p><p>分数从 <code>0~10</code>，如果是 8 分以上，则输出 <code>Good</code>，如果是 5 分以上则输出 <code>Just so so</code> ，如果是 5 分以下，则输出 <code>Bad</code> 。</p></li></ol><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 分支结构 </tag>
            
            <tag> 选择结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（二）</title>
      <link href="/2022/09/30/cpp-2/"/>
      <url>/2022/09/30/cpp-2/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（二）"><a href="#C-教程（二）" class="headerlink" title="C++教程（二）"></a>C++教程（二）</h1><h2 id="字符串初探"><a href="#字符串初探" class="headerlink" title="字符串初探"></a>字符串初探</h2><p>字符串是由多个字符拼接而成的数据类型，我们用 <code>&quot;&quot;</code> 括起多个字符以表示字符串。</p><p>如 ”Hello World” , “C++” , “1” 等。</p><p>如同数字 <code>123</code> 可以用 <code>int</code> 声明一样，字符串也有对应的声明方式。</p><p>如果您对 C语言 有所了解，那么您一定知道 C风格 的字符串的声明方式。</p><p>关于 C风格 的字符串我将会在介绍数组时一同介绍。</p><p><code>C++</code> 提供了 <code>string</code> 类，在使用它时我们需要包含头文件 <code>&lt;string&gt;</code> 。</p><p>下面演示一下它的简单用法，关于它的其它用法，我会在之后介绍。</p><p>示例程序 2.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// string类位于名称空间 std 中</span></span><br><span class="line">    std::string s1;</span><br><span class="line">    s1 = <span class="string">&quot;This is string1&quot;</span>;</span><br><span class="line">    std::string s2 = <span class="string">&quot;This is string2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;    </span><br><span class="line">    <span class="comment">//使用 std 名称空间 包括 string 和 cout</span></span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;This is string3&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例程序 2.1中，字符串 <code>s1</code> 和 <code>s2</code> 的声明与赋值比较易懂。</p><p>那么 <code>s3</code> 的初始化是怎么回事呢？</p><p>正如前文所说，<code>string</code> 是一个类，类中往往包含一个或多个构造函数。</p><p>这些将涉及 <code>C++</code> 面向对象编程的内容，我将在之后的文章中介绍。</p><p>初学者目前只需要知道 <code>s3</code> 这一字符串使用构造函数进行初始化即可。</p><p>这三种的初始化和赋值方式都是可行的，性能上可能会有微小的差别，但影响不大。</p><p>对于字符串的，同样可以使用 <code>cout</code> 等 <code>ostream</code> 类进行输出。</p><p>字符串就先介绍这些，下面我们来看看 <code>C++</code> 的输入。</p><h2 id="输入——与用户交互的桥梁"><a href="#输入——与用户交互的桥梁" class="headerlink" title="输入——与用户交互的桥梁"></a>输入——与用户交互的桥梁</h2><p>在头文件 <code>&lt;iostream&gt;</code> 中，不仅包含了 <code>ostream</code> 这一用于输出的类，还包含了名为 <code>istream</code> 的用于输入的类。</p><p>在名称空间 <code>std</code> 中包含了一个 <code>istream</code> 对象—— <code>cin</code> 。</p><p><code>cin</code> 本身可以用来从键盘或者输入源（如文件）中读取数据。</p><p>下面我们来看看示例。</p><p>示例程序 2.2 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    string name;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input x and y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x + y = &quot;</span> &lt;&lt; x + y &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please input your name&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name; <span class="comment">//or getline(cin,name);</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello &quot;</span> &lt;&lt; name </span><br><span class="line">        &lt;&lt;<span class="string">&quot;, welcome to C++ !&quot;</span> &lt;&lt; endl;    <span class="comment">//输出的内容可以放在不同行，不影响运行。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cout</code> 使用左移运算符 <code>&lt;&lt;</code> 进行输出，而 <code>cin</code> 则使用右移运算符 <code>&gt;&gt;</code> 实现输入。</p><p>和 <code>cout</code> 一样，<code>cin</code> 也可以使用 <code>&gt;&gt;</code> 连接多个需要输入的对象。</p><p><code>cin</code> 的输入默认时读取到空格或者换行符时停止。</p><p>对于示例程序中的输入名字，如果输入的是英文名，即中间有空格的字符串，要怎么处理呢？</p><p>这个时候，我们就使用 <code>std::getline()</code> 这一函数进行读取。</p><p>这个函数忽略空格，读取到换行符时停止。所以可以将 <code>cin &gt;&gt; name;</code> 替换成 <code>getline(cin,name);</code> 以达到读取一整行内容的效果。</p><p><code>getline()</code> 函数接受三个参数，它的原型是 <code>istream&amp; getline (istream &amp;is, string &amp;str, char delim)</code> 。</p><p>其中第三个参数是一个符号，当读取到这个符号时停止读取，这个参数默认为 <code>&#39;\n&#39;</code> ，即换行符。这是转义字符，关于转义字符我会在之后提到。</p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>在上一篇文章中，我介绍了初始化变量的方法，即使用等号进行赋值。</p><p>例如 <code>int x = 5;</code> ，将 5 赋值给整型变量 x 。</p><p>试考虑以下代码：<code>int x = 3.1415926</code> 会发生什么？</p><p>答案是 <code>3.1415926</code> 被截断，仅保留整数部分。所以 x 的值为 3。</p><blockquote><p>注意：浮点数被截断为整数时不会进行四舍五入。所以 <code>int x = 3.9999;</code> 中的 x 的值也是 3。</p></blockquote><p>再考虑 <code>double y = 1/7;</code> 中，y 的值为多少。</p><p>在回答这个问题之前，我有必要说明一下赋值的操作过程和 <code>C++</code> 运算的特性。</p><p>赋值是将等号右边的值，包括运算的结果和函数的返回值赋给左边的变量。 </p><p>对于同类型之间的运算，其结果为相同的类型。对于浮点数与整型之间的运算，其结果是浮点数。</p><p>根据这个特性，<code>1/7</code> 这个式子本身时两个整型之间的运算，那么得到的结果仍然是一个整型。</p><p>所以 <code>1/7 = 0.142857</code> 就会被截断为 0 。于是 y 的值为 0 。</p><p>如果要实现将 <code>1/7</code> 赋值给 <code>y</code> ，有以下几种方法。</p><p>示例程序 2.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> y1 = <span class="number">1</span>/<span class="number">7</span>;</span><br><span class="line">    <span class="type">double</span> y2 = <span class="number">1</span>*<span class="number">1.0</span>/<span class="number">7</span>;</span><br><span class="line">    <span class="type">double</span> y3 = (<span class="type">double</span>) <span class="number">1</span>/<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; y1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; y2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; y3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>y3 = (double) 1/7;</code> 就是将 <code>1/7</code> 强制转换成 <code>double</code> 类型。我个人比较推荐使用这种方法。</p><blockquote><p>注意：无论是什么时候，一定要小心这一特性，并且正确处理数据，防止发生严重后果。</p></blockquote><p>示例程序 2.3 中又出现了新的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br></pre></td></tr></table></figure><p>这两行代码告诉编译器只使用名称空间 <code>std</code> 中的 <code>cout</code> 和 <code>endl</code> 这两个 “工具” 。</p><p>如果要使用除了这两个以外的对象或函数，则需要在前面加上 <code>std::</code> 。</p><blockquote><p>为什么要这么做？如果您是学习信息竞赛的同学，那么您可以忽略这一点。</p><p>如果您有意愿使用 C++ 制作项目，那么，应该尽量使用 <code>std::</code> 而不是 <code>using</code> 指令的习惯。</p><p>名称空间存在的意义就是为了防止变量名重复，在制作项目的过程中会有许多变量，如果变量名重复，那名称空间将提供很好的解决方案。</p><p>如果一个名称空间中的函数或者对象在一个作用域（作用域我会在以后的文章中提到）出现多次，那么你可以使用 <code>using std::cout;</code> 这样的指令来进行使用。</p><p>尽量避免 <code>using namespace std;</code> 这种用法，如果一定要使用这条语句，也应该使用于局部。</p><p>对于信息竞赛的同学而言，则没有这么多的顾虑，因为做题目的时候代码都相对较短，就不需要考虑这一点。</p><p>当然，这些只是建议，如何使用还是取决于个人，根据个人习惯选择语句，也是提高效率的有效方式之一。关于名称空间，以后我会介绍到，如同函数一样，您也可以自己制作名称空间。</p></blockquote><h2 id="sizeof-简介-amp-常量声明与宏定义"><a href="#sizeof-简介-amp-常量声明与宏定义" class="headerlink" title="sizeof 简介 &amp; 常量声明与宏定义"></a>sizeof 简介 &amp; 常量声明与宏定义</h2><h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3><p>在上一章中，我们介绍了基本数据类型，在附录中有一张表格，其中列举了一些数据类型的取值范围和所占的字节数。</p><p>对于数据类型的取值范围我们可以使用头文件 <code>&lt;climits&gt;</code> 中的宏定义进行查看。</p><p>如果想要查看某一数据类型所占的字节数，要怎么办呢？</p><p>这时我们就需要使用 <code>sizeof</code> 运算符进行查询。</p><blockquote><p>注意：<code>sizeof</code> 是一个运算符，并不是一个函数。</p></blockquote><p>示例程序 2.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of int: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span> (<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of double: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span> (<span class="type">double</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of long long: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span> (<span class="type">long</span> <span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of a: &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> a &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of 0.1: &quot;</span> &lt;&lt; <span class="built_in">sizeof</span> (<span class="number">0.1</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;size of (double) a: &quot;</span> </span><br><span class="line">        &lt;&lt; <span class="built_in">sizeof</span> ( (<span class="type">double</span>) a ) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量所占的字节数与其类型相同。</p><h3 id="常量声明与宏定义"><a href="#常量声明与宏定义" class="headerlink" title="常量声明与宏定义"></a>常量声明与宏定义</h3><p>常量是指不能修改的量。比如数字 <code>123</code> ，字符 <code>&#39;a&#39;</code> 等等。</p><p>对于 <code>int a = 5;</code> 来说，<code>a</code> 是否属于常量呢？</p><p>显然，<code>a</code> 的值可以再改变，比如我们可以使用 <code>a = 8;</code> 这种赋值的方式修改 <code>a</code> 的值。</p><p>如果要将 <code>a</code> 限定为常量，即不可修改的量，则可以使用 <code>const</code> 限定符、 <code>enum</code> 枚举或者 <code>#define</code>  宏定义进行。</p><p>示例程序 2.5</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> a1 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Example</span>&#123; a2 = <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a3 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a1 = a2 = a3 = <span class="number">8</span>;<span class="comment">//非法，编译器将报错</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; a1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a2 &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">        &lt;&lt; a3 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>const</code> 、<code>enum</code> 和 <code>#define</code> 的用法和特性还有很多，我将在有需要的时候进行介绍。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li>查询您所知道的数据类型（如 <code>string</code> 、<code>float</code> 等）所占的字节数。</li><li><strong>输入</strong>身高与体重，输出相应的 <code>BMI</code> 指数。</li></ol><hr><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 教程（一）</title>
      <link href="/2022/09/23/cpp-1/"/>
      <url>/2022/09/23/cpp-1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-教程（一）"><a href="#C-教程（一）" class="headerlink" title="C++教程（一）"></a>C++教程（一）</h1><blockquote><p>关于这一系列教程：这一系列教程是面向微笙无上计算机协会想学C++的同学们，无论您是零基础的小白，亦或者是颇有成就的大佬，都可以使用该系列教程。<br>由于本人能力有限，这一系列教程难免会产生错误，欢迎大家在评论区里指出讨论，我会及时回复以及改正。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在学习 <code>C++</code> 之前，您可以大致浏览一下 <a href="https://baike.baidu.com/item/C%2B%2B/99272" title="C++的背景">C++的背景</a>。</p><p>然后您需要选择一款趁手的编译器。如果您是小白，或者参加信息竞赛的同学，那么可以使用 <code>Dev-Cpp</code> 这一款编译器，它算不上一款好的编译器，但是在现阶段使用是比较方便的。</p><p>您也可以尝试诸如 <code>Visual Studio</code> 或者 <code>Visual Studio Code</code> 这类编译器，这两款都是我比较喜欢的编译器。本系列教程使用的编译器为 <code>Dev-Cpp</code> 。接下来介绍一下编译器的使用。</p><h3 id="Dev-Cpp的使用"><a href="#Dev-Cpp的使用" class="headerlink" title="Dev-Cpp的使用"></a>Dev-Cpp的使用</h3><p>您可以点击左上角 <code>文件</code> ，然后选择 <code>新建</code> ，选择 <code>源代码</code> ；或者直接使用快捷键 <code>Ctrl+N</code> 来创建源文件。</p><p>输入代码之后点击 <code>Ctrl+S</code> 进行保存，敲代码的时候一定要养成保存代码的好习惯，防止出现意外状况导致功亏一篑。</p><p>然后您可以点击 <code>F11</code> 编译并运行程序。</p><p>这系列教程一般不涉及图形化窗口，所以程序的运行都是在 <code>控制台</code> （一个小黑框）中进行。</p><h2 id="正式学习"><a href="#正式学习" class="headerlink" title="正式学习"></a>正式学习</h2><h3 id="C-的输出"><a href="#C-的输出" class="headerlink" title="C++的输出"></a>C++的输出</h3><p>一个程序运行的最终结果的呈现是依赖于输出的，所以我先介绍一下 <code>C++</code> 的简单输出。</p><p>示例程序 1.1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序在控制台输出一个 “Hello World!” 的字符串以及一个换行符。</p><p>我们用这个示例程序来讲解一下 <code>C++</code> 程序的大致结构。</p><ol><li>头文件<br>头文件就像一个工具箱，如果您要使用其中的”工具“，那么就需要用 <code>#include</code> 指令来包含相应的头文件。头文件 <code>iostream</code> 的读法是 <code>Input &amp; Output stream</code> ，即标准输入输出流，如果要输入输出内容就需要使用该头文件。</li><li>函数<br>函数是 <code>C++</code> 的基本模块，一个函数头包括 <code>函数名称</code> 、<code>返回值类型</code> 、<code>参数列表</code> 三个元素。<br>示例程序中第三行的 <code>int main(void)</code> 就是一个函数头，它的返回值类型是整数 <code>int</code> ，它的名称是 <code>main</code> ，参数为 <code>void</code> ，意思为空，即不含参数，大括号 <code>&#123;&#125;</code> 中是函数的内容，或者叫实现。所有的程序都是从 <code>main()</code> 函数开始执行的，我们也可以在包括 <code>main</code> 函数的所有函数中调用其它函数。关于函数的细节以及内容我会在之后讲述。</li><li>语句<br>从示例程序第五行到第八行都是语句，它们都有各自的作用。</li></ol><p>第五行的 <code>using namespace std;</code> 是为下面是用 <code>cout</code> 以及 <code>endl</code>  做铺垫，如果不使用这一条语句，您也可以将下面的 <code>cout</code> 和 <code>endl</code> 分别替换成 <code>std::cout</code> 和 <code>std::endl</code> 。 <code>using namespace std;</code> 的作用是使用名为 <code>std</code> 的名称空间，关于名称空间以及 <code>using</code> 指令的用法我会在后面讲到</p><p>作为初学者，您们可以在每一个程序中都使用这一条语句，示例程序中将这一条语句放在 <code>main()</code> 中，您们也可以将这一句放在全局的位置，比如第二行。</p><p>第七行是这个程序的核心，<code>cout</code> 后面用 <code>&lt;&lt;</code> 符号连接您想要输出的内容，可以连接多个。例如您也可以将这一句代码改成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;Hello&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;World!&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>这两句是等效的。注意 <code>cout</code> 不是一个函数，函数是带有括号 <code>()</code> 的，如果用 <code>C语言</code> 风格的输出，您可以使用 <code>printf()</code> 函数进行输出。</p><p>那么关于 <code>cout</code> 是什么东西，这将涉及面向对象的一些陌生的概念和特性。为了满足读者的好奇心，这边做一个简单的介绍。</p><blockquote><p>关于 <code>cout</code> ：<code>cout</code> 是一个 <code>std::ostream</code> 的一个对象，用于输出，它包含许多成员函数用来进行格式化输出等工作，它通过重载运算符的方式，让左移运算符 <code>&lt;&lt;</code> 拥有输出的功能。</p></blockquote><p>对于初学者，目前只需要了解其用法就可以了。<code>cout</code> 后面用 <code>&lt;&lt;</code> 符号来连接输出的内容，不仅是字符串，还可以用来输出一些基本的数据类型，待会我会提供相关用法。</p><p>回到示例程序，第八行的 <code>return 0;</code> 告诉编译器，<code>main()</code> 函数返回一个整数类型的数字 0 。<code>main()</code> 函数一般都返回 0 。同时，注意不要省略 <code>main()</code> 的返回值，这也是良好的编程习惯。</p><p>每一条语句都用分号 <code>;</code> 间隔，编译器通过分号判断一条语句是否结束，所以，我们也可以将这些语句写在同一行，然后只用分号间隔，但是这样子程序的可读性就变差了，如果要进行修改和维护的话，将会变得非常麻烦。所以，我们一般使用换行以及制表符 <code>Tab</code> 来让语句变得层次分明。</p><p>第二行和第六行的空行编译器会直接省略，空行的作用也是让代码更加美观，便于管理。</p><h3 id="C-的变量"><a href="#C-的变量" class="headerlink" title="C++ 的变量"></a>C++ 的变量</h3><p><code>C++</code> 的变量需要声明，所谓声明，就像在解决数学问题的时候设某个量为 <code>x</code> ，然后再继续解题。 <code>C++</code> 的内置变量类型有许多种，下面我将进行简单的介绍。关于它们的取值范围等信息，我会在后面放一个表格供大家参考。</p><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><p>所谓整形，就是我们常说的整数，比如1、2、3，注意 <code>1.00</code> 不是整形，它属于浮点数也就是小数，下面我将会介绍。所以整形我们可以简单理解成只包含数字并且没有小数点的数据。</p><p>整形包括 <code>int</code>、<code>short</code>、<code>long</code>、<code>long long</code> 等等。</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数就是我们常说的小数，或者实数，浮点数类型有 <code>float</code> 、<code>double</code> 两种，它们有精度的限制，后者的精度比前者高，对于精确的计算，我们一般采用 <code>double</code>，但精度高也意味着付出更大的代价，<code>double</code>进行运算的速度会慢于其它变量类型。</p><h4 id="字符-字符串"><a href="#字符-字符串" class="headerlink" title="字符/字符串"></a>字符/字符串</h4><p><code>C++</code> 中，字符用单引号 <code>&#39;&#39;</code>扩起，字符串常量用双引号 <code>&quot;&quot;</code>扩起。例如，<code>&#39;a&#39;</code>是一个字符，而 <code>&quot;a&quot;</code>是一个字符串。同时注意，<code>&#39;1&#39;</code>、<code>&quot;1&quot;</code>和 <code>1</code>是三种不同的类型，它们不相同。</p><p>对于字符，我们用 <code>char</code>声明，而对于字符串，我们之后再进行讨论。</p><p>字符与整数通过 <code>ASCII</code> 码表相对应。例如，’a’ 在 <code>ASCII</code> 中对应97，如果使用 <code>cout&lt;&lt;(int) &#39;a&#39;&lt;&lt;endl;</code> 那么，将会输出数字97。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值是一个很有趣的东西，它只有两个值 <code>true</code> 和 <code>false</code> ，也可以分别用 <code>1</code> 和 <code>0</code> 代替。它们分别代表真和假。例如，1等于1是真，而1=2为假。我们用 <code>bool</code> 来声明布尔值。</p><h4 id="关于变量的赋值与初始化"><a href="#关于变量的赋值与初始化" class="headerlink" title="关于变量的赋值与初始化"></a>关于变量的赋值与初始化</h4><p>一个变量需要表示具体的值，我们需要给它进行赋值或者初始化操作，赋值和初始化使用等号 <code>=</code>进行。</p><p>变量名的声明也不是随心所欲的，变量名中可以有大小写字母，下划线 <code>_</code> ，数字，其中，数字不能放在变量名的第一个。</p><p>变量名的选取同时需要达到”望文生义“的效果，避免随意取变量名，最后不知道这个变量的作用，也要注意避免变量名与关键字重复或者与头文件中的定义重复。</p><p>未初始化的变量是未知的，所以，对于每个变量，我们应尽量进行初始化。</p><p>例如：</p><p>示例程序1.2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a,b,c,d;    <span class="comment">//合法</span></span><br><span class="line">    a=b=c=d=<span class="number">0</span>;</span><br><span class="line">    a=b=<span class="number">2</span>;</span><br><span class="line">    c=d=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> e=<span class="number">2</span>,f=<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> ee,ff=<span class="number">4</span>;    <span class="comment">//只有 ff 被初始化为4，ee还未初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    x=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x1;    <span class="comment">//合法</span></span><br><span class="line">    x1=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> _x;    <span class="comment">//合法</span></span><br><span class="line">    _x=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="number">1</span>x;    <span class="comment">//不合法</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    y=<span class="number">0.345</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="type">long</span> l=<span class="number">100000000</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ll=<span class="number">100000000000000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> f=<span class="number">0.1</span>;</span><br><span class="line">    <span class="type">double</span> d=<span class="number">3.141592653500000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ch=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以自行使用 <code>cout</code> 输出相关变量。</p><h4 id="关于变量的附件"><a href="#关于变量的附件" class="headerlink" title="关于变量的附件"></a>关于变量的附件</h4><blockquote><p><a href="https://baike.baidu.com/item/ASCII/309296" title="ASCII码详解">ASCII码详解</a></p></blockquote><p>各种内置变量的范围等信息：<br><a href="https://blog.purkit.ml/wp-content/uploads/2022/09/v2-50a2ed497a931e0775f8db3e468e8205_r.jpg"><img src="https://blog.purkit.ml/wp-content/uploads/2022/09/v2-50a2ed497a931e0775f8db3e468e8205_r.jpg"></a></p><p>如果记不住这些范围，可以使用头文件 <code>climits</code> 中的宏定义来查看每种类型的最大值和最小值。例如：</p><p>示例程序1.3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;INT_MAX&lt;&lt;endl;    <span class="comment">//查看 int 的最大值</span></span><br><span class="line">    cout&lt;&lt;INT_MIN&lt;&lt;endl;    <span class="comment">//查看 int 的最小值</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;LONG_LONG_MAX&lt;&lt;endl;    <span class="comment">//查看 long long 的最大值</span></span><br><span class="line">    cout&lt;&lt;LONG_LONG_MIN&lt;&lt;endl;    <span class="comment">//查看 long long 的最小值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例程序1.2和1.3中出现了新的东西 <code>//</code> ，这是用于注释的符号，从 <code>//</code> 到一行结束的部分都是注释，和空行一样，编译器会忽略注释的部分，养成写注释的好习惯有助于提高程序的可读性以及节省维护的时间。对于大的项目，注释的必要性将会逐渐体现出来。</p><h3 id="C-的运算符"><a href="#C-的运算符" class="headerlink" title="C++ 的运算符"></a>C++ 的运算符</h3><p><code>C++</code> 的运算符有许多种，这里先介绍一下和简单计算相关的运算符。<br>首先是加减乘除，分别对应 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>，我们可以将变量或者常量的运算结果赋值给另一个变量。</p><p><strong>注意，如果几个不同类型的变量或者常量进行运算应该使用强制类型转换，关于强制类型转换我会在下一篇讲到，本文暂不讨论这部分内容。</strong></p><p>除了加减乘除，还有一个取模运算符 <code>%</code>，所谓取模，就是我们平常说的求余数，比如 <code>10%3=1</code>。注意，取模运算符只适用于整形。</p><p>示例程序1.4</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a+b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a-b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a*b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (<span class="type">double</span>) a/b &lt;&lt; endl;<span class="comment">//使用强制类型转换</span></span><br><span class="line">    cout &lt;&lt; a%b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> d1=<span class="number">1.234</span>;</span><br><span class="line">    <span class="type">double</span> d2=<span class="number">2.345678</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> d3=d1+d2;</span><br><span class="line">    cout &lt;&lt; d3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>今天的内容就这些了，下一篇我将介绍强制类型转换以及输入的内容。下面是一些简单的练习题，供大家复习。</p><ol><li>计算您自己的BMI指数，并输出到屏幕上。</li><li>计算半径为 <code>12345678</code>的圆的面积与周长，其中圆周率取 <code>3.1415926535897</code>，输出到屏幕上。</li><li>输出 <code>98765432122</code>和 <code>4678421300</code>四则运算的结果以及取模的结果。</li></ol><blockquote><p>欢迎大家在评论区交流讨论。第一次写教程，有点不知所措，如果有什么意见欢迎提出，我会视情况采纳。如果有什么写的不好的地方还请多多包涵。<br>下一篇教程我将讲述输入以及类型转换的内容。敬请期待。</p></blockquote><p>——END——</p>]]></content>
      
      
      <categories>
          
          <category> C++ 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 输出 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
